#include <stdio.h>
#include <dsplib\wavefile.h>
#include <stdfix.h>
#include <string.h>
#include "common.h"
#include "processing.h"
static DSPfract sampleBuffer[MAX_NUM_CHANNEL][BLOCK_SIZE];

int main(int argc, char *argv[])
 {
    WAVREAD_HANDLE *wav_in;
    WAVWRITE_HANDLE *wav_out;

	char WavInputName[256];
	char WavOutputName[256];

    DSPint inChannels;
    DSPint outChannels;
    DSPint bitsPerSample;
    DSPint sampleRate;
    DSPint iNumSamples;
    DSPint i;
    DSPint j;

	DSPfract input_gain;
	double input_gainDB;
	DSPfract headroom_gain;
	double headroom_gainDB;
	int mode;
	DSPint OUTPUT_NUM_CHANNELS = 2;

	if (argc < 3 || argc > 6 || argc == 4 || argc == 5)
	{
		printf("Wrong input.\n");
		printf("Command line arguments: \n");
		printf("[Input file location] [Output file location] [Input Gain] [Headroom Gain] [Mode] \n");
		printf("\n");
		printf("a) Input gain -> Default = -6db Values: From 0 to  negative inf db \n");
		printf("b) Headroom gain -> Default = -6db Values: From 0 to negative inf db \n");
		printf("c) Mode: 0 -> OM2_0_0, 1 -> OM0_2_0, 2 -> OM3_2_0 \n");
		return -1;
	}
	if (argc == 3)
	{
		input_gain = MINUS_6DB;
		headroom_gain = MINUS_3DB;
		mode = OM2_0_0;
		OUTPUT_NUM_CHANNELS = 2;
	}
	else
	{
		//TO DO: Should I add if input_gain > 1 / 2
		input_gainDB = atof(argv[3]);
		input_gainDB = input_gainDB > fract(0.0) ? -6.0 : input_gainDB;
		input_gain = pow(10.0, input_gainDB / 20.0);

		headroom_gainDB = atof(argv[4]);
		headroom_gainDB = headroom_gainDB > fract(0.0) ? -3.0 : headroom_gainDB;
		headroom_gain = pow(10.0, headroom_gainDB / 20.0);

		mode = atoi(argv[5]);

		if (mode < 0 || mode > 3)
		{
			mode = OM2_0_0;
			OUTPUT_NUM_CHANNELS = 2;
		}

		switch (mode)
		{
		case OM2_0_0:
			OUTPUT_NUM_CHANNELS = 2;
			break;
		case  OM0_2_0:
			OUTPUT_NUM_CHANNELS = 2;
			break;
		case OM3_2_0:
			OUTPUT_NUM_CHANNELS = 5;
			break;
		default:
			break;
		}
	}
	// Init channel buffers
	for(i=0; i<MAX_NUM_CHANNEL; i++)
		for(j=0; j<BLOCK_SIZE; j++)
			sampleBuffer[i][j] = FRACT_NUM(0.0);

	// Open input wav file
	//-------------------------------------------------
	strcpy(WavInputName,argv[0]);
	wav_in = cl_wavread_open(WavInputName);
	 if(wav_in == NULL)
    {
        printf("Error: Could not open wavefile.\n");
        return -1;
    }
	//-------------------------------------------------

	// Read input wav header
	//-------------------------------------------------
	inChannels = cl_wavread_getnchannels(wav_in);
    bitsPerSample = cl_wavread_bits_per_sample(wav_in);
    sampleRate = cl_wavread_frame_rate(wav_in);
    iNumSamples =  cl_wavread_number_of_frames(wav_in);
	initialize(input_gain, headroom_gain, mode);
	//-------------------------------------------------

	// Open output wav file
	//-------------------------------------------------
	strcpy(WavOutputName,argv[1]);
	outChannels = inChannels;
	wav_out = cl_wavwrite_open(WavOutputName, bitsPerSample, outChannels, sampleRate);
	if(!wav_out)
    {
        printf("Error: Could not open wavefile.\n");
        return -1;
    }
	//-------------------------------------------------

	// Processing loop
	//-------------------------------------------------
    {
		int i;
		int j;
		int k;
		int sample;

		// exact file length should be handled correctly...
		for(i=0; i<iNumSamples/BLOCK_SIZE; i++)
		{
			for(j=0; j<BLOCK_SIZE; j++)
			{
				for(k=0; k<inChannels; k++)
				{
					sample = cl_wavread_recvsample(wav_in);
        			sampleBuffer[k][j] = rbits(sample);
				}
			}

			// pozvati processing funkciju ovde
			gainProcessing(sampleBuffer, sampleBuffer);

			for(j=0; j<BLOCK_SIZE; j++)
			{
				for(k=0; k<outChannels; k++)
				{
					int channel = 0;
					switch (mode)
					{
						case OM2_0_0:
							if (k == 0) channel = LEFT_CH;
							if (k == 1) channel = RIGHT_CH;
							break;
						case OM0_2_0:
							if (k == 0) channel = LEFTS_CH;
							if (k == 1) channel = RIGHTS_CH;
							break;
						case OM3_2_0:
							if (k == 0) channel = LEFT_CH;
							if (k == 1) channel = RIGHT_CH;
							if (k == 2) channel = CENTER_CH;
							if (k == 3) channel = LEFTS_CH;
							if (k == 4) channel = RIGHTS_CH;
						default:
							break;
					}
					sample = bitsr(sampleBuffer[channel][j]);
					cl_wavwrite_sendsample(wav_out, sample);
				}
			}
		}
	}

	// Close files
	//-------------------------------------------------
    cl_wavread_close(wav_in);
    cl_wavwrite_close(wav_out);
	//-------------------------------------------------

    return 0;
 }
