_GAINPROC_ASM
	.if defined (_GAINPROC_ASM)
	
_BLOCK_SIZE .equ 16
_INPUT_NUM_CHANNELS .equ 2
_LEFT_CH .equ 0
_RIGHT_CH .equ 1
_CENTER_CH .equ 2
_LS_CH .equ 3
_RS_CH .equ 4

	.public _gainProcessing
	.public _initialize
	.extern _tremoloBuffer
	.extern _headroom_gain
	.extern _input_gain
	.extern _OUTPUT_GAIN6
	.extern _OUTPUT_GAIN2
	.extern _mode
	.extern _tremolo_ptr
	.extern _init	# tremolo function
	.extern _processBlock # tremolo function


	.code_ovly

_initialize:
# void initialize(DSPfract input_gain_func, DSPfract headroom_gain_func, DSPint mode_func);
	
	# a0 = input_gain_func
	# a1 = headroom_gain_func
	# b0 = mode_func
	
	
	xmem[_input_gain] = a0

	xmem[_headroom_gain] = a1
	
	xmem[_mode] = b0
	ret
_gainProcessing:
	# void gainProcessing(__memY DSPfract pIn[][BLOCK_SIZE], __memY DSPfract pOut[][BLOCK_SIZE]);
	# i0 = pIn
	# i1 = pOut
	
	i5 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
	do(_BLOCK_SIZE),>loop
		x0 = ymem[i0] # get L values
		y0 = xmem[_input_gain] # get Input Gain
		a0 = x0 * y0	# left_channel * input_gain
		ymem[i5] = a0	# value to Ls tremoloBuffer
		i5 = i5 + _BLOCK_SIZE	# go to Rs channel
		
		i0 = i0 + _BLOCK_SIZE # go to R channel
		nop
		x0 = ymem[i0]	# get R values
		i0 = i0 - _BLOCK_SIZE
		a0 = x0 * y0
		ymem[i5] = a0
		i5 = i5 - _BLOCK_SIZE
		
		a0 = xmem[_mode]	# check if mode is OM3_2_0
		a1 = (1)
		a0 - a1
		if (a != 0) jmp>ifOM3
			a0 = b0	# if yes, sum*headroom_gain -> L & R output
			a0 = a0 + b1
			
			x0 = a0
			y0 = xmem[_headroom_gain]
			a0 = x0 * y0
			
			ymem[i1] = a0
			i1 = i1 + _BLOCK_SIZE
			ymem[i1] = a0		
			b1 = xmem[_mode]
			b0 = (2)
			b1 - b0	
			if(b == 0) jmp>ifOM3 # check if C channel, if yes enter value
				i1 = i1 + _BLOCK_SIZE
				ymem[i1] = a0
				i1 = i1 - _BLOCK_SIZE 				
%ifOM3:	i1 = i1 - _BLOCK_SIZE
	i0 += 1
	i1 += 1
%loop: i5 += 1
	
	a0 = xmem[_mode]
	a0&a0
	if (a != 0) jmp>end
	i0 = ymem[_tremolo_ptr]		# init(tremolo_ptr)
	nop
	call(_init)
firstCall:
		i5 = i1
		i0 = (_tremoloBuffer + _LS_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i1 = (_tremoloBuffer + _LS_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i4 = ymem[_tremolo_ptr]
		call(_processBlock)
		nop
		i5 = i5 + (_LS_CH * _BLOCK_SIZE)
		do(_BLOCK_SIZE),>secondCall
			a0 = ymem[i1]
			ymem[i5] = a0
			i1 += 1
%secondCall: 
		i0 = ymem[_tremolo_ptr]
		call(_init)
		i5 += 1
thirdCall:	
		i0 = (_tremoloBuffer + _RS_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i1 = (_tremoloBuffer + _RS_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i4 = ymem[_tremolo_ptr]
		call(_processBlock)
		i5 = i1 + (_RS_CH * _BLOCK_SIZE)
		do(_BLOCK_SIZE),>end
			a0 = ymem[i1]
			ymem[i5] = a0
			i1 += 1
%end:
	ret
	
	.endif