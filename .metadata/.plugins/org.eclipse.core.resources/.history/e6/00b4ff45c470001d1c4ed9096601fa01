_GAINPROC_ASM

	.if defined (_GAINPROC_ASM)
_BLOCK_SIZE .equ 16
_INPUT_NUM_CHANNELS .equ 2
_LEFT_CH .equ 0
_RIGHT_CH .equ 1
_CENTER_CH .equ 2
_LS_CH .equ 3
_RS_CH .equ 4

# Tremolo
_LFO_Frequency .equ 1
_depth .equ 2
_waveform .equ 3
_lfoPhase .equ 4
_inverseSampleRate .equ 5
#_SAMPLE_RATE .equ 4800

	.public _gainProcessing
	.public _initialize
	.public _processBlock
	.public _init
	
	.extern _tremoloBuffer
	.extern _headroom_gain
	.extern _input_gain
	.extern _OUTPUT_GAIN6
	.extern _OUTPUT_GAIN2
	.extern _mode
	.extern _tremoloL
	.extern _tremoloR
	.extern _lfo
	#.extern _init
	#.extern _processBlock

	.code_ovly



_initialize:
# void initialize(DSPfract input_gain_func, DSPfract headroom_gain_func, DSPint mode_func);
	
	# a0 = input_gain_func
	# a1 = headroom_gain_func
	# b0 = mode_func
	
	
	xmem[_input_gain] = a0

	xmem[_headroom_gain] = a1
	
	xmem[_mode] = b0
	
	ret
_gainProcessing:
	# void gainProcessing(__memY DSPfract pIn[][BLOCK_SIZE], __memY DSPfract pOut[][BLOCK_SIZE]);
	# i0 = pIn
	# i1 = pOut
	i5 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
	do(_BLOCK_SIZE),>loop
		x0 = ymem[i0] # get L values
		y0 = xmem[_input_gain] # get Input Gain
		b0 = x0 * y0	# left_channel * input_gain
		ymem[i5] = b0	# value to Ls tremoloBuffer
		i5 = i5 + _BLOCK_SIZE	# go to Rs channel
		
		i0 = i0 + _BLOCK_SIZE # go to R channel
		nop
		x0 = ymem[i0]	# get R values
		i0 = i0 - _BLOCK_SIZE
		b1 = x0 * y0 # right channel * input_gain
		ymem[i5] = b1	#value to Rs tremoloBuffer
		i5 = i5 - _BLOCK_SIZE
		
		a0 = xmem[_mode]	
		uhalfword(a1) = (1)
		a0 - a1
		if (a == 0) jmp>ifOM3
			# if yes, sum*headroom_gain -> L & R output
			b0 = b0 + b1
			
			x0 = b0
			y0 = xmem[_headroom_gain]
			a0 = x0 * y0
			
			x0 = a0
			y0 = xmem[_OUTPUT_GAIN6]
			a0 = x0 * y0
			
			ymem[i1] = a0
			i1 = i1 + _BLOCK_SIZE
			ymem[i1] = a0		
			b1 = xmem[_mode]
			b0 = (2)
			b1 - b0	
			if(b != 0) jmp>ifJmp # check if C channel, if yes enter value
				i1 = i1 + _BLOCK_SIZE
				ymem[i1] = a0
				i1 = i1 - _BLOCK_SIZE
%ifJmp:
  			i1 = i1 - _BLOCK_SIZE	
  			i1 += 1
%ifOM3:
			i0 += 1
%loop: i5 += 1
	a0 = xmem[_mode]
	a0&a0
	if (a == 0) jmp>end
firstCall:
		i0 = (_tremoloL)
		call(_init)
		i0 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i1 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i4 = (_tremoloL)
		call(_processBlock)
		i0 = (1)
		nop
		i1 = i0 + (_LS_CH * _BLOCK_SIZE)
		i0 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)
		x0 = xmem[_OUTPUT_GAIN2]
		do(_BLOCK_SIZE),>secondCall
			y0 = ymem[i0]
			nop
			a0 = x0 * y0
			nop
			ymem[i1] = a0
			i1 += 1
%secondCall: i0 += 1
thirdCall:	
		i0 = (_tremoloR)
		call(_init)
		i0 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
		i1 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer		i4 = ymem[_tremoloL]
		i4 = (_tremoloR)
		call(_processBlock)
		i0 = (1)
		nop
		i1 = i0 + (_RS_CH * _BLOCK_SIZE)
		i0 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)
		x0 = xmem[_OUTPUT_GAIN2]
		do(_BLOCK_SIZE),>end
			y0 = ymem[i0]
			a0 = x0 * y0
			nop
			ymem[i1] = a0
			i0 += 1
			i1 += 1
%end:
	ret
# _init:
	#__memY tremolo_struct_t * data
	# i0 = data
	i1 = i0 + _LFO_Frequency
	x0 = (0x7fff)
	nop
	ymem[i1] = x0
	i1 = i0 + _depth
	ymem[i1] = x0
	i1 = i0 + _waveform
	x0 = (0x7fff)
	ymem[i1] = x0
	i1 = i0 + _lfoPhase 
	x0 = (0x0000)
	ymem[i1] = x0
	x0 = (0xaec3)
	i1 = i0 + _inverseSampleRate
	ymem[i1] = x0
	
_processBlock:
	ymem[i7] = i0; i7 += 1
	ymem[i7] = i1; i7 += 1
	
	i5 = i4 + _lfoPhase
	a0 = ymem[i5]
	do(_BLOCK_SIZE),>loop
		i5 = i4 + _waveform
		a1 = ymem[i5]
		call(_lfo)
		x0 = a0
		
		i5 = i4 + _depth
		y0 = ymem[i5]
		a0 = x0 * y0
		
		i7 -= 1
		i1 = ymem[i7]
		i7 -= 1
		i0 = ymem[i7]
		nop
		x0 = ymem[i0]
		b0 = (0x7FFF)
		b0 = b0 - a0
		y0 = b0
		a0 = x0 * y0
		
		ymem[i1] = a0
		
		
		i0 += 1
		i1 += 1
		
		ymem[i7] = i0; i7 += 1
		ymem[i7] = i1; i7 += 1
		
		i5 = i4 + _LFO_Frequency
		x0 = ymem[i5]
		
		i5 = i4 + _inverseSampleRate
		y0 = ymem[i5]
		
		a0 = x0 * y0
		
		a0 = a0 << 1
		
		b1 = b1 + a0
		
		b0 = (0x7FFF)
		
		b1 - b0
		if (b<0) jmp>loop
			b1 = b1 - b0 
%loop:
	nop
	i5 = i4 + _lfoPhase
	ymem[i5] = b1	
	i7 -= 1
	i7 -= 1
	ret
	.endif