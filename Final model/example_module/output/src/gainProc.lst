1     	 0000				_GAINPROC_ASM
2     						
3     							.if defined (_GAINPROC_ASM)
4     						.include "example_module_mcv.h"
4      >> open include file: C:/Users/milic/Desktop/Dsp Projekat/Final model/example_module/gen/inc/example_module_mcv.h
1+    						/*
2+    						 * This file is automatically generated by CLIDE
3+    						 *
4+    						 * MCV (Module Control Vector)
5+    						 */
6+    						.include "dsplib/meter_asm.h" 
6+     >> open include file: C:/CirrusDSP/include/dsplib/meter_asm.h
1+    							.if !defined(_meter_h_)
2+    	 0000				_meter_h_
3+    						
4+    						METER_T .struct
5+    						RMS .dw 0			#fract(1.31)
6+    						RMS_HOLD .dw 0		#fract(1.31)
7+    						PEAK .dw 0			#fract(1.31)
8+    						PEAK_HOLD .dw 0		#fract(1.31)
9+    							.endstruct
10+   						
11+   						(null)11+    >> end of include file: C:/CirrusDSP/include/dsplib/meter_asm.h
11+    >> continuing with file: C:/Users/milic/Desktop/Dsp Projekat/Final model/example_module/gen/inc/example_module_mcv.h
7+    						.include "dsplib/response_asm.h"
7+     >> open include file: C:/CirrusDSP/include/dsplib/response_asm.h
1+    							.if !defined(_response_h_)
2+    	 0000				_response_h_
3+    						
4+    						BIQUAD_T .struct
5+    						COEF_A1 .dw 0			#fract(2.30)
6+    						COEF_A2 .dw 0			#fract(2.30)
7+    						COEF_B0 .dw 1			#fract(3.29)
8+    						COEF_B1 .dw 0			#fract(3.29)
9+    						COEF_B2 .dw 0			#fract(3.29)
10+   							.endstruct
11+   						
12+   						RESPONSE_T .struct
13+   						PRE .dw 0			#fract(7.25)
14+   						POST .dw 0			#fract(7.25)
15+   							.rept %i = 0,2
16+   						BIQUAD_%i BIQUAD_T		#struct
17+    >> start of macro: .rept
1+    						BIQUAD_0 BIQUAD_T		#struct
2+    						BIQUAD_1 BIQUAD_T		#struct
3+    						BIQUAD_2 BIQUAD_T		#struct
4+    						
17+   							.endm
18+   							.endstruct
19+   							
20+   							.endif21+   						(null)21+    >> end of include file: C:/CirrusDSP/include/dsplib/response_asm.h
21+    >> continuing with file: C:/Users/milic/Desktop/Dsp Projekat/Final model/example_module/gen/inc/example_module_mcv.h
8+    						
9+    	 0001				isDefined	 .equ 	 1
10+   						
11+   						MCV_T	.struct
12+   						enable .dw 0	 #bool
13+   						input_gain_control .dw 0	 #fract(1.31)
14+   						headroom_gain_control .dw 0	 #fract(1.31)
15+   						mode_control .dw 0	 #int
16+   							.endstruct
17+   						
18+   						
19+   	 0000				STRUCTURE_INITIALIZATION_STRNG .equ "0x1, 0x40000000, 0x26666666, 0x00000001"
20+    >> end of include file: C:/Users/milic/Desktop/Dsp Projekat/Final model/example_module/gen/inc/example_module_mcv.h
20+    >> continuing with file: C:/Users/milic/Desktop/Dsp Projekat/Final model/example_module/src/gainProc.a
5     							
6     	 0010				_BLOCK_SIZE .equ 16
7     	 0002				_INPUT_NUM_CHANNELS .equ 2
8     	 0000				_LEFT_CH .equ 0
9     	 0001				_RIGHT_CH .equ 1
10    	 0002				_CENTER_CH .equ 2
11    	 0003				_LS_CH .equ 3
12    	 0004				_RS_CH .equ 4
13    						
14    						# Tremolo
15    	 0001				_LFO_Frequency .equ 1
16    	 0002				_depth .equ 2
17    	 0003				_waveform .equ 3
18    	 0004				_lfoPhase .equ 4
19    	 0005				_inverseSampleRate .equ 5
20    						#_SAMPLE_RATE .equ 
21    						_OUTPUT_GAIN6 .xdata_ovly .dw (0.50118)
21     >> start of macro: .xdata_ovly
1+    									seg_single _OUTPUT_GAIN6, "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "_OUTPUT_GAIN6" != "" ) & defined( ___SegStart_X__OUTPUT_GAIN6 )
2+    						_OUTPUT_GAIN6    segment
3+    						  .else
4+    						_OUTPUT_GAIN6    segment "X_OVLY"
5+    							.if "_OUTPUT_GAIN6" != ""
6+    	 0000				___SegStart_X__OUTPUT_GAIN6
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
22    						 
23    						_OUTPUT_GAIN2 .xdata_ovly .dw (0.794328)
23     >> start of macro: .xdata_ovly
1+    									seg_single _OUTPUT_GAIN2, "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "_OUTPUT_GAIN2" != "" ) & defined( ___SegStart_X__OUTPUT_GAIN2 )
2+    						_OUTPUT_GAIN2    segment
3+    						  .else
4+    						_OUTPUT_GAIN2    segment "X_OVLY"
5+    							.if "_OUTPUT_GAIN2" != ""
6+    	 0000				___SegStart_X__OUTPUT_GAIN2
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
24    						
25    						_tremoloBuffer .ydata_ovly .bss (16)
25     >> start of macro: .ydata_ovly
1+    									seg_single _tremoloBuffer, "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "_tremoloBuffer" != "" ) & defined( ___SegStart_Y__tremoloBuffer )
2+    						_tremoloBuffer    segment
3+    						  .else
4+    						_tremoloBuffer    segment "Y_OVLY"
5+    							.if "_tremoloBuffer" != ""
6+    	 0000				___SegStart_Y__tremoloBuffer
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
26    						_tremoloL .ydata_ovly .bss (6)
26     >> start of macro: .ydata_ovly
1+    									seg_single _tremoloL, "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "_tremoloL" != "" ) & defined( ___SegStart_Y__tremoloL )
2+    						_tremoloL    segment
3+    						  .else
4+    						_tremoloL    segment "Y_OVLY"
5+    							.if "_tremoloL" != ""
6+    	 0000				___SegStart_Y__tremoloL
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
27    						_tremoloR .ydata_ovly .bss (6)
27     >> start of macro: .ydata_ovly
1+    									seg_single _tremoloR, "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "_tremoloR" != "" ) & defined( ___SegStart_Y__tremoloR )
2+    						_tremoloR    segment
3+    						  .else
4+    						_tremoloR    segment "Y_OVLY"
5+    							.if "_tremoloR" != ""
6+    	 0000				___SegStart_Y__tremoloR
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
28    							
29    	 0000					.public _gainProcessing
30    	 0000					.public _initialize
31    	 0000					.extern _tremoloBuffer
32    	 0000					.extern _headroom_gain
33    	 0000					.extern _input_gain
34    	 0000					.extern _mode
35    	 0000					.extern _lfo
36    						
37    						
38    							.code_ovly
38     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
39    						
40    						
41    						
42    	 0000				_initialize:
43    						# void initialize(DSPfract input_gain_func, DSPfract headroom_gain_func, DSPint mode_func);
44    							
45    							# a0 = input_gain_func
46    							# a1 = headroom_gain_func
47    							# b0 = mode_func
48    							
49    							
50    	 0000	 88440000		xmem[_input_gain] = a0
51    						
52    	 0001	 89440000		xmem[_headroom_gain] = a1
53    							
54    	 0002	 8C440000		xmem[_mode] = b0
55    							
56    	 0003	 81880000		ret
57    	 0004				_gainProcessing:
58    							# void gainProcessing(__memY DSPfract pIn[][BLOCK_SIZE], __memY DSPfract pOut[][BLOCK_SIZE]);
59    							# i0 = pIn
60    							# i1 = pOut
61    	 0004	 B94A0000		i5 = (_tremoloBuffer)	# pointer on Tremolo buffer
62    	 0005	 8100002A		do(_BLOCK_SIZE),>loop
63    	 0006	 80940000			x0 = ymem[i0] # get L values
64    	 0007	 84040000			y0 = xmem[_input_gain] # get Input Gain
65    	 0008	 00002404			b0 = x0 * y0	# left_channel * input_gain
66    	 0009	 8CD40005			ymem[i5] = b0	# value to Ls tremoloBuffer
67    	 000A	 85550010			i5 = i5 + _BLOCK_SIZE	# go to Rs channel
68    								
69    	 000B	 80050010			i0 = i0 + _BLOCK_SIZE # go to R channel
70    	 000C	 00007FFF			nop
71    	 000D	 80940000			x0 = ymem[i0]	# get R values
72    	 000E	 90050010			i0 = i0 - _BLOCK_SIZE
73    	 000F	 00002405			b1 = x0 * y0 # right channel * input_gain
74    	 0010	 8DD40005			ymem[i5] = b1	#value to Rs tremoloBuffer
75    	 0011	 95550010			i5 = i5 - _BLOCK_SIZE
76    								
77    	 0012	 88040000			a0 = xmem[_mode]	
78    	 0013	 894A0001			uhalfword(a1) = (1)
79    	 0014	 00004F08			a0 - a1
80    	 0015	 84080029			if (a == 0) jmp>ifOM3
81    									# if yes, sum*headroom_gain -> L & R output
82    	 0016	 0000440C				b0 = b0 + b1
83    									
84    	 0017	 4C407FFF				x0 = b0
85    	 0018	 84040000				y0 = xmem[_headroom_gain]
86    	 0019	 00002400				a0 = x0 * y0
87    									
88    	 001A	 48407FFF				x0 = a0
89    	 001B	 84040000				y0 = xmem[_OUTPUT_GAIN6]
90    	 001C	 00002400				a0 = x0 * y0
91    									
92    	 001D	 88D40001				ymem[i1] = a0
93    	 001E	 81150010				i1 = i1 + _BLOCK_SIZE
94    	 001F	 88D40001				ymem[i1] = a0		
95    	 0020	 8D040000				b1 = xmem[_mode]
96    	 0021	 8C7A0002				b0 = (2)
97    	 0022	 00004F05				b1 - b0	
98    	 0023	 86480027				if(b != 0) jmp>ifJmp # check if C channel, if yes enter value
99    	 0024	 81150010					i1 = i1 + _BLOCK_SIZE
100   	 0025	 88D40001					ymem[i1] = a0
101   	 0026	 91150010					i1 = i1 - _BLOCK_SIZE
102   	 0027				%ifJmp:
103   	 0027	 91150010	  			i1 = i1 - _BLOCK_SIZE	
104   	 0028	 02097FFF	  			i1 += 1
105   	 0029				%ifOM3:
106   	 0029	 02087FFF				i0 += 1
107   	 002A	 020D7FFF	%loop: i5 += 1
108   	 002B	 88040000		a0 = xmem[_mode]
109   	 002C	 00004E80		a0&a0
110   	 002D	 84080053		if (a == 0) jmp>end
111   	 002E				firstCall:
112   	 002E	 B04A0000			i0 = (_tremoloL)
113   	 002F	 80880054			call(_init)
114   	 0030	 B04A0000			i0 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
115   	 0031	 B14A0000			i1 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
116   	 0032	 B84A0000			i4 = (_tremoloL)
117   	 0033	 80880064			call(_processBlock)
118   	 0034	 B04A0001			i0 = (1)
119   	 0035	 00007FFF			nop
120   	 0036	 81050030			i1 = i0 + (_LS_CH * _BLOCK_SIZE)
121   	 0037	 B04A0000			i0 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)
122   	 0038	 80040000			x0 = xmem[_OUTPUT_GAIN2]
123   	 0039	 81000040			do(_BLOCK_SIZE),>secondCall
124   	 003A	 84940000				y0 = ymem[i0]
125   	 003B	 00007FFF				nop
126   	 003C	 00002400				a0 = x0 * y0
127   	 003D	 00007FFF				nop
128   	 003E	 88D40001				ymem[i1] = a0
129   	 003F	 02097FFF				i1 += 1
130   	 0040	 02087FFF	%secondCall: i0 += 1
131   	 0041				thirdCall:	
132   	 0041	 B04A0000			i0 = (_tremoloR)
133   	 0042	 80880054			call(_init)
134   	 0043	 B04A0010			i0 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
135   	 0044	 B14A0010			i1 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer		i4 = ymem[_tremoloL]
136   	 0045	 B84A0000			i4 = (_tremoloR)
137   	 0046	 80880064			call(_processBlock)
138   	 0047	 B04A0001			i0 = (1)
139   	 0048	 00007FFF			nop
140   	 0049	 81050040			i1 = i0 + (_RS_CH * _BLOCK_SIZE)
141   	 004A	 B04A0010			i0 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)
142   	 004B	 80040000			x0 = xmem[_OUTPUT_GAIN2]
143   	 004C	 81000053			do(_BLOCK_SIZE),>end
144   	 004D	 84940000				y0 = ymem[i0]
145   	 004E	 00002400				a0 = x0 * y0
146   	 004F	 00007FFF				nop
147   	 0050	 88D40001				ymem[i1] = a0
148   	 0051	 02087FFF				i0 += 1
149   	 0052	 02097FFF				i1 += 1
150   	 0053				%end:
151   	 0053	 81880000		ret
152   	 0054				_init:
153   							#__memY tremolo_struct_t * data
154   							# i0 = data
155   	 0054	 81050001		i1 = i0 + _LFO_Frequency
156   	 0055	 887A7FFF		a0 = (0x7fff)
157   	 0056	 00007FFF		nop
158   	 0057	 88D40001		ymem[i1] = a0
159   	 0058	 81050002		i1 = i0 + _depth
160   	 0059	 88D40001		ymem[i1] = a0
161   	 005A	 81050003		i1 = i0 + _waveform
162   	 005B	 884A0001		uhalfword(a0) = (0x1)
163   	 005C	 88D40001		ymem[i1] = a0
164   	 005D	 81050004		i1 = i0 + _lfoPhase 
165   	 005E	 887A0000		a0 = (0x0000)
166   	 005F	 88D40001		ymem[i1] = a0
167   	 0060	 884AAEC3		uhalfword(a0) = (0xaec3)
168   	 0061	 81050005		i1 = i0 + _inverseSampleRate
169   	 0062	 88D40001		ymem[i1] = a0
170   	 0063	 81880000		ret	
171   	 0064				_processBlock:
172   	 0064	 B0D40017		ymem[i7] = i0; i7 += 1
173   	 0065	 B1D40017		ymem[i7] = i1; i7 += 1
174   							
175   	 0066	 85450004		i5 = i4 + _lfoPhase
176   	 0067	 88940005		a0 = ymem[i5]
177   	 0068	 8100008A		do(_BLOCK_SIZE),>loop
178   	 0069	 85450003			i5 = i4 + _waveform
179   	 006A	 89940005			a1 = ymem[i5]
180   	 006B	 80880000			call(_lfo)
181   	 006C	 48407FFF			x0 = a0
182   								
183   	 006D	 85450002			i5 = i4 + _depth
184   	 006E	 84940005			y0 = ymem[i5]
185   	 006F	 00002400			a0 = x0 * y0
186   								
187   	 0070	 02177FFF			i7 -= 1
188   	 0071	 B1940007			i1 = ymem[i7]
189   	 0072	 02177FFF			i7 -= 1
190   	 0073	 B0940007			i0 = ymem[i7]
191   	 0074	 00007FFF			nop
192   	 0075	 80940000			x0 = ymem[i0]
193   	 0076	 8C7A7FFF			b0 = (0x7FFF)
194   	 0077	 00004464			b0 = b0 - a0
195   	 0078	 4C447FFF			y0 = b0
196   	 0079	 00002400			a0 = x0 * y0
197   								
198   	 007A	 88D40001			ymem[i1] = a0
199   								
200   								
201   	 007B	 02087FFF			i0 += 1
202   	 007C	 02097FFF			i1 += 1
203   								
204   	 007D	 B0D40017			ymem[i7] = i0; i7 += 1
205   	 007E	 B1D40017			ymem[i7] = i1; i7 += 1
206   								
207   	 007F	 85450001			i5 = i4 + _LFO_Frequency
208   	 0080	 80940005			x0 = ymem[i5]
209   								
210   	 0081	 85450005			i5 = i4 + _inverseSampleRate
211   	 0082	 84940005			y0 = ymem[i5]
212   								
213   	 0083	 00002400			a0 = x0 * y0
214   								
215   	 0084	 00004E00			a0 = a0 << 1
216   								
217   	 0085	 000044A5			b1 = b1 + a0
218   								
219   	 0086	 8C7A7FFF			b0 = (0x7FFF)
220   								
221   	 0087	 00004F05			b1 - b0
222   	 0088	 8688008A			if (b<0) jmp>loop
223   	 0089	 000044C5				b1 = b1 - b0 
224   	 008A				%loop:
225   	 008A	 00007FFF		nop
226   	 008B	 85450004		i5 = i4 + _lfoPhase
227   	 008C	 8DD40005		ymem[i5] = b1	
228   	 008D	 02177FFF		i7 -= 1
229   	 008E	 02177FFF		i7 -= 1
230   	 008F	 81880000		ret
231   							.endif
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

STRUCTURE_INITIALIZATION_STRNG                                                  			  Unused String		   '0x1, 0x40000000, 0x26666666, 0x00000001' 
_BLOCK_SIZE                                                                     					 Number				          16 (10H)
_CENTER_CH                                                                      			  Unused Number				      2 (2H)
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           			  Unused Variable		        0 (0H)
_GAINPROC_ASM                                                                   			  Unused Relocatable        __INIT:0000H
_INPUT_NUM_CHANNELS                                                             			  Unused Number				      2 (2H)
_LEFT_CH                                                                        					 Number				         0 (0H)
_LFO_Frequency                                                                  					 Number				          1 (1H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_LS_CH                                                                          					 Number				          3 (3H)
_OUTPUT_GAIN2                                                                   			         Relocatable         _OUTPUT_GAIN2:0000H
_OUTPUT_GAIN6                                                                   			         Relocatable         _OUTPUT_GAIN6:0000H
_RIGHT_CH                                                                       					 Number				          1 (1H)
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_RS_CH                                                                          					 Number				          4 (4H)
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___SegStart_X__OUTPUT_GAIN2                                                     			  Unused Relocatable        _OUTPUT_GAIN2:0000H
___SegStart_X__OUTPUT_GAIN6                                                     			  Unused Relocatable        _OUTPUT_GAIN6:0000H
___SegStart_Y__tremoloBuffer                                                    			  Unused Relocatable        _tremoloBuffer:0000H
___SegStart_Y__tremoloL                                                         			  Unused Relocatable        _tremoloL:0000H
___SegStart_Y__tremoloR                                                         			  Unused Relocatable        _tremoloR:0000H
_depth                                                                          					 Number				          2 (2H)
_gainProcessing                                                                 			  Public Relocatable       gainProc_GEN_0000:0004H
_headroom_gain                                                                  					 External   
_init                                                                           			         Relocatable         gainProc_GEN_0000:0054H
_initialize                                                                     			  Public Relocatable       gainProc_GEN_0000:0000H
_input_gain                                                                     					 External   
_inverseSampleRate                                                              					 Number				          5 (5H)
_lfo                                                                            					 External   
_lfoPhase                                                                       					 Number				          4 (4H)
_meter_h_                                                                       			  Unused Relocatable        __INIT:0000H
_mode                                                                           					 External   
_processBlock                                                                   			         Relocatable         gainProc_GEN_0000:0064H
_response_h_                                                                    			  Unused Relocatable        __INIT:0000H
_tremoloBuffer                                                                  			         Relocatable         _tremoloBuffer:0000H
_tremoloL                                                                       			         Relocatable         _tremoloL:0000H
_tremoloR                                                                       			         Relocatable         _tremoloR:0000H
_waveform                                                                       					 Number				          3 (3H)
firstCall                                                                       			  Unused Relocatable        gainProc_GEN_0000:002EH
isDefined                                                                       			  Unused Number				      1 (1H)
thirdCall                                                                       			  Unused Relocatable        gainProc_GEN_0000:0041H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0000H	 _OUTPUT_GAIN6                           			 X_OVLY                                  
0000H	 _OUTPUT_GAIN2                           			 X_OVLY                                  
0000H	 _tremoloBuffer                          			 Y_OVLY                                  
0000H	 _tremoloL                               			 Y_OVLY                                  
0000H	 _tremoloR                               			 Y_OVLY                                  
0090H	 gainProc_GEN_0000                       			 CODE_OVLY                               
