1     	 0000				_GAINPROC_ASM
2     						
3     							.if defined (_GAINPROC_ASM)
4     	 0010				_BLOCK_SIZE .equ 16
5     	 0002				_INPUT_NUM_CHANNELS .equ 2
6     	 0000				_LEFT_CH .equ 0
7     	 0001				_RIGHT_CH .equ 1
8     	 0002				_CENTER_CH .equ 2
9     	 0003				_LS_CH .equ 3
10    	 0004				_RS_CH .equ 4
11    						
12    	 0000					.public _gainProcessing
13    	 0000					.public _initialize
14    	 0000					.extern _tremoloBuffer
15    	 0000					.extern _headroom_gain
16    	 0000					.extern _input_gain
17    	 0000					.extern _OUTPUT_GAIN6
18    	 0000					.extern _OUTPUT_GAIN2
19    	 0000					.extern _mode
20    	 0000					.extern _tremoloL
21    	 0000					.extern _tremoloR
22    	 0000					.extern _processBlock # tremolo function
23    						
24    						
25    							.code_ovly
25     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
26    						
27    	 0000				_initialize:
28    						# void initialize(DSPfract input_gain_func, DSPfract headroom_gain_func, DSPint mode_func);
29    							
30    							# a0 = input_gain_func
31    							# a1 = headroom_gain_func
32    							# b0 = mode_func
33    							
34    							
35    	 0000	 88440000		xmem[_input_gain] = a0
36    						
37    	 0001	 89440000		xmem[_headroom_gain] = a1
38    							
39    	 0002	 8C440000		xmem[_mode] = b0
40    	 0003	 81880000		ret
41    	 0004				_gainProcessing:
42    							# void gainProcessing(__memY DSPfract pIn[][BLOCK_SIZE], __memY DSPfract pOut[][BLOCK_SIZE]);
43    							# i0 = pIn
44    							# i1 = pOut
45    	 0004	 B94A0000		i5 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
46    	 0005	 8100002A		do(_BLOCK_SIZE),>loop
47    	 0006	 80940000			x0 = ymem[i0] # get L values
48    	 0007	 84040000			y0 = xmem[_input_gain] # get Input Gain
49    	 0008	 00002404			b0 = x0 * y0	# left_channel * input_gain
50    	 0009	 8CD40005			ymem[i5] = b0	# value to Ls tremoloBuffer
51    	 000A	 85550010			i5 = i5 + _BLOCK_SIZE	# go to Rs channel
52    								
53    	 000B	 80050010			i0 = i0 + _BLOCK_SIZE # go to R channel
54    	 000C	 00007FFF			nop
55    	 000D	 80940000			x0 = ymem[i0]	# get R values
56    	 000E	 90050010			i0 = i0 - _BLOCK_SIZE
57    	 000F	 00002405			b1 = x0 * y0
58    	 0010	 8DD40005			ymem[i5] = b1
59    	 0011	 95550010			i5 = i5 - _BLOCK_SIZE
60    								
61    	 0012	 88040000			a0 = xmem[_mode]	
62    	 0013	 894A0001			uhalfword(a1) = (1)
63    	 0014	 00004F08			a0 - a1
64    	 0015	 84080029			if (a == 0) jmp>ifOM3
65    									# if yes, sum*headroom_gain -> L & R output
66    	 0016	 0000440C				b0 = b0 + b1
67    									
68    	 0017	 4C407FFF				x0 = b0
69    	 0018	 84040000				y0 = xmem[_headroom_gain]
70    	 0019	 00002400				a0 = x0 * y0
71    									
72    	 001A	 48407FFF				x0 = a0
73    	 001B	 84040000				y0 = xmem[_OUTPUT_GAIN6]
74    	 001C	 00002400				a0 = x0 * y0
75    									
76    	 001D	 88D40001				ymem[i1] = a0
77    	 001E	 81150010				i1 = i1 + _BLOCK_SIZE
78    	 001F	 88D40001				ymem[i1] = a0		
79    	 0020	 8D040000				b1 = xmem[_mode]
80    	 0021	 8C7A0002				b0 = (2)
81    	 0022	 00004F05				b1 - b0	
82    	 0023	 86480027				if(b != 0) jmp>ifJmp # check if C channel, if yes enter value
83    	 0024	 81150010					i1 = i1 + _BLOCK_SIZE
84    	 0025	 88D40001					ymem[i1] = a0
85    	 0026	 91150010					i1 = i1 - _BLOCK_SIZE
86    	 0027				%ifJmp:
87    	 0027	 91150010	  			i1 = i1 - _BLOCK_SIZE	
88    	 0028	 02097FFF	  			i1 += 1
89    	 0029				%ifOM3:
90    	 0029	 02087FFF				i0 += 1
91    	 002A	 020D7FFF	%loop: i5 += 1
92    	 002B	 88040000		a0 = xmem[_mode]
93    	 002C	 00004E80		a0&a0
94    	 002D	 8408004F		if (a == 0) jmp>end
95    	 002E				firstCall:
96    	 002E	 B04A0000			i0 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
97    	 002F	 B14A0000			i1 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
98    	 0030	 B84A0000			i4 = (_tremoloL)
99    	 0031	 80880000			call(_processBlock)
100   	 0032	 B04A0001			i0 = (1)
101   	 0033	 00007FFF			nop
102   	 0034	 81050030			i1 = i0 + (_LS_CH * _BLOCK_SIZE)
103   	 0035	 B04A0000			i0 = (_tremoloBuffer + _LEFT_CH * _BLOCK_SIZE)
104   	 0036	 84040000			y0 = xmem[_OUTPUT_GAIN2]
105   	 0037	 8100003E			do(_BLOCK_SIZE),>secondCall
106   	 0038	 80940000				x0 = ymem[i0]
107   	 0039	 00007FFF				nop
108   	 003A	 00002400				a0 = x0 * y0
109   	 003B	 00007FFF				nop
110   	 003C	 88D40001				ymem[i1] = a0
111   	 003D	 02097FFF				i1 += 1
112   	 003E	 02087FFF	%secondCall: i0 += 1
113   	 003F				thirdCall:	
114   	 003F	 B04A0000			i0 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer
115   	 0040	 B14A0000			i1 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)	# pointer on Tremolo buffer		i4 = ymem[_tremoloL]
116   	 0041	 B84A0000			i4 = (_tremoloR)
117   	 0042	 80880000			call(_processBlock)
118   	 0043	 B04A0001			i0 = (1)
119   	 0044	 00007FFF			nop
120   	 0045	 81050040			i1 = i0 + (_RS_CH * _BLOCK_SIZE)
121   	 0046	 B04A0000			i0 = (_tremoloBuffer + _RIGHT_CH * _BLOCK_SIZE)
122   	 0047	 84040000			y0 = xmem[_OUTPUT_GAIN2]
123   	 0048	 8100004F			do(_BLOCK_SIZE),>end
124   	 0049	 80940000				x0 = ymem[i0]
125   	 004A	 00002400				a0 = x0 * y0
126   	 004B	 00007FFF				nop
127   	 004C	 88D40001				ymem[i1] = a0
128   	 004D	 02087FFF				i0 += 1
129   	 004E	 02097FFF				i1 += 1
130   	 004F				%end:
131   	 004F	 81880000		ret
132   							
133   							.endif
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_BLOCK_SIZE                                                                     					 Number				          16 (10H)
_CENTER_CH                                                                      			  Unused Number				      2 (2H)
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_GAINPROC_ASM                                                                   			  Unused Relocatable        __INIT:0000H
_INPUT_NUM_CHANNELS                                                             			  Unused Number				      2 (2H)
_LEFT_CH                                                                        					 Number				         0 (0H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_LS_CH                                                                          					 Number				          3 (3H)
_MUI_VERSION_                                                                   					 Define                 "020000"
_OUTPUT_GAIN2                                                                   					 External   
_OUTPUT_GAIN6                                                                   					 External   
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_RIGHT_CH                                                                       					 Number				          1 (1H)
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_RS_CH                                                                          					 Number				          4 (4H)
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
_gainProcessing                                                                 			  Public Relocatable       gainProc_GEN_0000:0004H
_headroom_gain                                                                  					 External   
_initialize                                                                     			  Public Relocatable       gainProc_GEN_0000:0000H
_input_gain                                                                     					 External   
_mode                                                                           					 External   
_processBlock                                                                   					 External   
_tremoloBuffer                                                                  					 External   
_tremoloL                                                                       					 External   
_tremoloR                                                                       					 External   
firstCall                                                                       			  Unused Relocatable        gainProc_GEN_0000:002EH
thirdCall                                                                       			  Unused Relocatable        gainProc_GEN_0000:003FH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0050H	 gainProc_GEN_0000                       			 CODE_OVLY                               
