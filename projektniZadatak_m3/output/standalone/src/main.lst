1     	 0000					.extern _cl_wavread_bits_per_sample
2     	 0000					.extern _cl_wavread_close
3     	 0000					.extern _cl_wavread_frame_rate
4     	 0000					.extern _cl_wavread_getnchannels
5     	 0000					.extern _cl_wavread_number_of_frames
6     	 0000					.extern _cl_wavread_open
7     	 0000					.extern _cl_wavread_recvsample
8     	 0000					.extern _cl_wavwrite_close
9     	 0000					.extern _cl_wavwrite_open
10    	 0000					.extern _cl_wavwrite_sendsample
11    	 0000					.extern _gainProcessing
12    	 0000					.extern _initialize
13    	 0000					.public _main
14    	 0000					.extern _printf
15    	 0000					.extern _strcpy
16    	 0000					.extern __div
17    							.xdata_ovly
17     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
18    	 0000				__extractedConst_0_1
19    	 0000					.dw  (0x4026aa8e)
	 0000	 4026AA8E	 
20    							.xdata_ovly
20     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
21    	 0000				__extractedConst_1_1
22    	 0000					.dw  (0x5a9df97a)
	 0000	 5A9DF97A	 
23    							.xdata_ovly
23     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
24    	 0000				_sampleBuffer
25    	 0000					.bss (0x80)
26    							.xdata_ovly
26     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
27    	 0000				_string_const_0
28    	 0000					.dw  (0x45)
	 0000	 00000045	 
29    	 0001					.dw  (0x72)
	 0001	 00000072	 
30    	 0002					.dw  (0x72)
	 0002	 00000072	 
31    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
32    	 0004					.dw  (0x72)
	 0004	 00000072	 
33    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
34    	 0006					.dw  (0x20)
	 0006	 00000020	 
35    	 0007					.dw  (0x43)
	 0007	 00000043	 
36    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
37    	 0009					.dw  (0x75)
	 0009	 00000075	 
38    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
39    	 000B					.dw  (0x64)
	 000B	 00000064	 
40    	 000C					.dw  (0x20)
	 000C	 00000020	 
41    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
42    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
43    	 000F					.dw  (0x74)
	 000F	 00000074	 
44    	 0010					.dw  (0x20)
	 0010	 00000020	 
45    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
46    	 0012					.dw  (0x70)
	 0012	 00000070	 
47    	 0013					.dw  (0x65)
	 0013	 00000065	 
48    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
49    	 0015					.dw  (0x20)
	 0015	 00000020	 
50    	 0016					.dw  (0x77)
	 0016	 00000077	 
51    	 0017					.dw  (0x61)
	 0017	 00000061	 
52    	 0018					.dw  (0x76)
	 0018	 00000076	 
53    	 0019					.dw  (0x65)
	 0019	 00000065	 
54    	 001A					.dw  (0x66)
	 001A	 00000066	 
55    	 001B					.dw  (0x69)
	 001B	 00000069	 
56    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
57    	 001D					.dw  (0x65)
	 001D	 00000065	 
58    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
59    	 001F					.dw  (0xa)
	 001F	 0000000A	 
60    	 0020					.dw  (0x0)
	 0020	 00000000	 
61    							.xdata_ovly
61     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
62    	 0000				_string_const_1
63    	 0000					.dw  (0x45)
	 0000	 00000045	 
64    	 0001					.dw  (0x72)
	 0001	 00000072	 
65    	 0002					.dw  (0x72)
	 0002	 00000072	 
66    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
67    	 0004					.dw  (0x72)
	 0004	 00000072	 
68    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
69    	 0006					.dw  (0x20)
	 0006	 00000020	 
70    	 0007					.dw  (0x43)
	 0007	 00000043	 
71    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
72    	 0009					.dw  (0x75)
	 0009	 00000075	 
73    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
74    	 000B					.dw  (0x64)
	 000B	 00000064	 
75    	 000C					.dw  (0x20)
	 000C	 00000020	 
76    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
77    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
78    	 000F					.dw  (0x74)
	 000F	 00000074	 
79    	 0010					.dw  (0x20)
	 0010	 00000020	 
80    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
81    	 0012					.dw  (0x70)
	 0012	 00000070	 
82    	 0013					.dw  (0x65)
	 0013	 00000065	 
83    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
84    	 0015					.dw  (0x20)
	 0015	 00000020	 
85    	 0016					.dw  (0x77)
	 0016	 00000077	 
86    	 0017					.dw  (0x61)
	 0017	 00000061	 
87    	 0018					.dw  (0x76)
	 0018	 00000076	 
88    	 0019					.dw  (0x65)
	 0019	 00000065	 
89    	 001A					.dw  (0x66)
	 001A	 00000066	 
90    	 001B					.dw  (0x69)
	 001B	 00000069	 
91    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
92    	 001D					.dw  (0x65)
	 001D	 00000065	 
93    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
94    	 001F					.dw  (0xa)
	 001F	 0000000A	 
95    	 0020					.dw  (0x0)
	 0020	 00000000	 
96    							.code_ovly
96     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
97    						
98    						
99    						
100   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
101   							.if defined(_OVLY_)
102   								.if .strcmp('standalone',_OVLY_)=0
103   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
104   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
105   	 0000				dummy		.equ(__start)
106   								.else
107   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
108   						dummy		.equ(__intvec)
109   								.endif
110   								.endif
111   							.endif
112   						
113   	 0000				_main:			/* LN: 9 | CYCLE: 0 | RULES: () */ 
114   	 0000	 BB540007		xmem[i7] = i7			# LN: 9 | 
115   	 0001	 020F7FFF		i7 += 1			# LN: 9 | 
116   	 0002	 87750214		i7 = i7 + (0x214)			# LN: 9 | 
117   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 9 | 
118   	 0004	 98540001		xmem[i1] = a0h			# LN: 9 | 
119   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 9 | 
120   	 0006	 B0540001		xmem[i1] = i0			# LN: 9 | 
121   	 0007				cline_9_0:			/* LN: 28 | CYCLE: 0 | RULES: () */ 
122   	 0007	 88040000		a0 = xmem[__extractedConst_0_1 + 0]			# LN: 28 | 
123   	 0008	 90750003		i0 = i7 - (0x3)			# LN: 28 | 
124   	 0009	 98540000		xmem[i0] = a0h			# LN: 28 | 
125   	 000A				cline_28_0:			/* LN: 29 | CYCLE: 0 | RULES: () */ 
126   	 000A	 88040000		a0 = xmem[__extractedConst_1_1 + 0]			# LN: 29 | 
127   	 000B	 90750004		i0 = i7 - (0x4)			# LN: 29 | 
128   	 000C	 98540000		xmem[i0] = a0h			# LN: 29 | 
129   	 000D				cline_29_0:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
130   	 000D	 90750005		i0 = i7 - (0x5)			# LN: 30 | 
131   	 000E	 00004DC0		a0 = 0			# LN: 30 | 
132   	 000F	 98540000		xmem[i0] = a0h			# LN: 30 | 
133   	 0010				cline_30_0:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
134   	 0010	 90750006		i0 = i7 - (0x6)			# LN: 31 | 
135   	 0011	 884A0002		uhalfword(a0) = (0x2)			# LN: 31 | 
136   	 0012	 98540000		xmem[i0] = a0h			# LN: 31 | 
137   	 0013				cline_31_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
138   	 0013	 90750007		i0 = i7 - (0x7)			# LN: 34 | 
139   	 0014	 00004DC0		a0 = 0			# LN: 34 | 
140   	 0015	 98540000		xmem[i0] = a0h			# LN: 34 | 
141   	 0016	 80800032		do (0x8), label_end_93			# LN: 34 | 
142   	 0017				cline_34_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
143   	 0017				label_begin_93:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
144   	 0017	 90750008		i0 = i7 - (0x8)			# LN: 35 | 
145   	 0018	 00004DC0		a0 = 0			# LN: 35 | 
146   	 0019	 98540000		xmem[i0] = a0h			# LN: 35 | 
147   	 001A	 8100002C		do (0x10), label_end_92			# LN: 35 | 
148   	 001B				cline_35_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
149   	 001B				label_begin_92:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
150   	 001B	 90750007		i0 = i7 - (0x7)			# LN: 36 | 
151   	 001C	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 36, 36 | 
152   	 001D	 00004EC0		a0 = a0 << 4			# LN: 36 | 
153   	 001E	 48707FFF		i0 = a0			# LN: 36 | 
154   	 001F	 91750008		i1 = i7 - (0x8)			# LN: 36 | 
155   	 0020	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 36 | 
156   	 0021	 88140001		a0 = xmem[i1]			# LN: 36 | 
157   	 0022	 0C707FFF		b0 = i0			# LN: 36 | 
158   	 0023	 00004420		a0 = a0 + b0			# LN: 36 | 
159   	 0024	 98090030		AnyReg(i0, a0h)			# LN: 36 | 
160   	 0025	 00007FFF		nop #empty cycle
161   	 0026	 99540000		xmem[i0] = a1h			# LN: 36 | 
162   	 0027				cline_36_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
163   	 0027				init_latch_label_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
164   	 0027	 90750008		i0 = i7 - (0x8)			# LN: 35 | 
165   	 0028	 88140000		a0 = xmem[i0]			# LN: 35 | 
166   	 0029	 894A0001		uhalfword(a1) = (0x1)			# LN: 35 | 
167   	 002A	 00004408		a0 = a0 + a1			# LN: 35 | 
168   	 002B	 90750008		i0 = i7 - (0x8)			# LN: 35 | 
169   	 002C				label_end_92:			# LN: 35 | CYCLE: 5 | RULES: ()
170   	 002C	 98540000		xmem[i0] = a0h			# LN: 35 | 
171   	 002D				cline_35_1:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
172   	 002D				init_latch_label_1:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
173   	 002D				for_end_1:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
174   	 002D	 90750007		i0 = i7 - (0x7)			# LN: 34 | 
175   	 002E	 88140000		a0 = xmem[i0]			# LN: 34 | 
176   	 002F	 894A0001		uhalfword(a1) = (0x1)			# LN: 34 | 
177   	 0030	 00004408		a0 = a0 + a1			# LN: 34 | 
178   	 0031	 90750007		i0 = i7 - (0x7)			# LN: 34 | 
179   	 0032				label_end_93:			# LN: 34 | CYCLE: 5 | RULES: ()
180   	 0032	 98540000		xmem[i0] = a0h			# LN: 34 | 
181   	 0033				cline_34_1:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
182   	 0033				for_end_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
183   	 0033	 90750002		i0 = i7 - (0x2)			# LN: 40 | 
184   	 0034	 B0140000		i0 = xmem[i0]			# LN: 40 | 
185   	 0035	 91750108		i1 = i7 - (264 - 0)			# LN: 40 | 
186   	 0036	 B8140000		i4 = xmem[i0]			# LN: 40 | 
187   	 0037	 B1090030		i0 = i1			# LN: 40 | 
188   	 0038	 B8090031		i1 = i4			# LN: 40 | 
189   	 0039	 80880000		call (_strcpy)			# LN: 40 | 
190   	 003A				cline_40_0:			/* LN: 41 | CYCLE: 0 | RULES: () */ 
191   	 003A	 90750108		i0 = i7 - (264 - 0)			# LN: 41 | 
192   	 003B	 80880000		call (_cl_wavread_open)			# LN: 41 | 
193   	 003C	 98090030		AnyReg(i0, a0h)			# LN: 41 | 
194   	 003D	 91750109		i1 = i7 - (0x109)			# LN: 41 | 
195   	 003E	 B0540001		xmem[i1] = i0			# LN: 41 | 
196   	 003F				cline_41_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
197   	 003F	 90750109		i0 = i7 - (0x109)			# LN: 42 | 
198   	 0040	 88140000		a0 = xmem[i0]			# LN: 42 | 
199   	 0041	 00004E80		a0 & a0			# LN: 42 | 
200   	 0042	 84480047		if (a != 0) jmp (else_0)			# LN: 42 | 
201   	 0043				cline_42_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
202   	 0043	 A0050000		i0 = (0) + (_string_const_0)			# LN: 44 | 
203   	 0044	 80880000		call (_printf)			# LN: 44 | 
204   	 0045				cline_44_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
205   	 0045	 886AFFFF		halfword(a0) = (0xffff)			# LN: 45 | 
206   	 0046	 8008015A		jmp (__epilogue_270)			# LN: 45 | 
207   	 0047				cline_45_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
208   	 0047				endif_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
209   	 0047				else_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
210   	 0047	 90750109		i0 = i7 - (0x109)			# LN: 51 | 
211   	 0048	 B0140000		i0 = xmem[i0]			# LN: 51 | 
212   	 0049	 80880000		call (_cl_wavread_getnchannels)			# LN: 51 | 
213   	 004A	 9075010A		i0 = i7 - (0x10a)			# LN: 51 | 
214   	 004B	 98540000		xmem[i0] = a0h			# LN: 51 | 
215   	 004C				cline_51_0:			/* LN: 52 | CYCLE: 0 | RULES: () */ 
216   	 004C	 90750109		i0 = i7 - (0x109)			# LN: 52 | 
217   	 004D	 B0140000		i0 = xmem[i0]			# LN: 52 | 
218   	 004E	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 52 | 
219   	 004F	 9075010B		i0 = i7 - (0x10b)			# LN: 52 | 
220   	 0050	 98540000		xmem[i0] = a0h			# LN: 52 | 
221   	 0051				cline_52_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
222   	 0051	 90750109		i0 = i7 - (0x109)			# LN: 53 | 
223   	 0052	 B0140000		i0 = xmem[i0]			# LN: 53 | 
224   	 0053	 80880000		call (_cl_wavread_frame_rate)			# LN: 53 | 
225   	 0054	 9075010C		i0 = i7 - (0x10c)			# LN: 53 | 
226   	 0055	 98540000		xmem[i0] = a0h			# LN: 53 | 
227   	 0056				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
228   	 0056	 90750109		i0 = i7 - (0x109)			# LN: 54 | 
229   	 0057	 B0140000		i0 = xmem[i0]			# LN: 54 | 
230   	 0058	 80880000		call (_cl_wavread_number_of_frames)			# LN: 54 | 
231   	 0059	 9075010D		i0 = i7 - (0x10d)			# LN: 54 | 
232   	 005A	 98540000		xmem[i0] = a0h			# LN: 54 | 
233   	 005B				cline_54_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
234   	 005B	 90750002		i0 = i7 - (0x2)			# LN: 59 | 
235   	 005C	 B0140000		i0 = xmem[i0]			# LN: 59 | 
236   	 005D	 9175020D		i1 = i7 - (525 - 0)			# LN: 59 | 
237   	 005E	 02087FFF		i0 += 1			# LN: 59 | 
238   	 005F	 B8140000		i4 = xmem[i0]			# LN: 59 | 
239   	 0060	 B1090030		i0 = i1			# LN: 59 | 
240   	 0061	 B8090031		i1 = i4			# LN: 59 | 
241   	 0062	 80880000		call (_strcpy)			# LN: 59 | 
242   	 0063				cline_59_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
243   	 0063	 90750006		i0 = i7 - (0x6)			# LN: 60 | 
244   	 0064	 88140000		a0 = xmem[i0]			# LN: 60 | 
245   	 0065	 9075020E		i0 = i7 - (0x20e)			# LN: 60 | 
246   	 0066	 98540000		xmem[i0] = a0h			# LN: 60 | 
247   	 0067				cline_60_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
248   	 0067	 9075020D		i0 = i7 - (525 - 0)			# LN: 61 | 
249   	 0068	 9175010B		i1 = i7 - (0x10b)			# LN: 61 | 
250   	 0069	 88140001		a0 = xmem[i1]			# LN: 61 | 
251   	 006A	 9175020E		i1 = i7 - (0x20e)			# LN: 61 | 
252   	 006B	 89140001		a1 = xmem[i1]			# LN: 61 | 
253   	 006C	 9175010C		i1 = i7 - (0x10c)			# LN: 61 | 
254   	 006D	 8C140001		b0 = xmem[i1]			# LN: 61 | 
255   	 006E	 80880000		call (_cl_wavwrite_open)			# LN: 61 | 
256   	 006F	 98090030		AnyReg(i0, a0h)			# LN: 61 | 
257   	 0070	 9175020F		i1 = i7 - (0x20f)			# LN: 61 | 
258   	 0071	 B0540001		xmem[i1] = i0			# LN: 61 | 
259   	 0072				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
260   	 0072	 9075020F		i0 = i7 - (0x20f)			# LN: 62 | 
261   	 0073	 88140000		a0 = xmem[i0]			# LN: 62 | 
262   	 0074	 00004E80		a0 & a0			# LN: 62 | 
263   	 0075	 8448007A		if (a != 0) jmp (else_1)			# LN: 62 | 
264   	 0076				cline_62_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
265   	 0076	 A0050000		i0 = (0) + (_string_const_1)			# LN: 64 | 
266   	 0077	 80880000		call (_printf)			# LN: 64 | 
267   	 0078				cline_64_0:			/* LN: 65 | CYCLE: 0 | RULES: () */ 
268   	 0078	 886AFFFF		halfword(a0) = (0xffff)			# LN: 65 | 
269   	 0079	 8008015A		jmp (__epilogue_270)			# LN: 65 | 
270   	 007A				cline_65_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
271   	 007A				endif_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
272   	 007A				else_1:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
273   	 007A	 90750003		i0 = i7 - (0x3)			# LN: 68 | 
274   	 007B	 88140000		a0 = xmem[i0]			# LN: 68 | 
275   	 007C	 90750004		i0 = i7 - (0x4)			# LN: 68 | 
276   	 007D	 89140000		a1 = xmem[i0]			# LN: 68 | 
277   	 007E	 90750005		i0 = i7 - (0x5)			# LN: 68 | 
278   	 007F	 8C140000		b0 = xmem[i0]			# LN: 68 | 
279   	 0080	 80880000		call (_initialize)			# LN: 68 | 
280   	 0081				cline_68_0:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
281   	 0081	 90750210		i0 = i7 - (0x210)			# LN: 78 | 
282   	 0082	 00004DC0		a0 = 0			# LN: 78 | 
283   	 0083	 98540000		xmem[i0] = a0h			# LN: 78 | 
284   	 0084				for_2:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
285   	 0084	 9075010D		i0 = i7 - (0x10d)			# LN: 78 | 
286   	 0085	 88140000		a0 = xmem[i0]			# LN: 78 | 
287   	 0086	 894A0010		uhalfword(a1) = (0x10)			# LN: 78 | 
288   	 0087	 80880000		call (__div)			# LN: 78 | 
289   	 0088	 90750210		i0 = i7 - (0x210)			# LN: 78 | 
290   	 0089	 89140000		a1 = xmem[i0]			# LN: 78 | 
291   	 008A	 00004F01		a1 - a0			# LN: 78 | 
292   	 008B	 84C80152		if (a >= 0) jmp (for_end_2)			# LN: 78 | 
293   	 008C				cline_78_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
294   	 008C	 90750211		i0 = i7 - (0x211)			# LN: 80 | 
295   	 008D	 00004DC0		a0 = 0			# LN: 80 | 
296   	 008E	 98540000		xmem[i0] = a0h			# LN: 80 | 
297   	 008F	 810000B7		do (0x10), label_end_94			# LN: 80 | 
298   	 0090				cline_80_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
299   	 0090				label_begin_94:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
300   	 0090	 90750212		i0 = i7 - (0x212)			# LN: 82 | 
301   	 0091	 00004DC0		a0 = 0			# LN: 82 | 
302   	 0092	 98540000		xmem[i0] = a0h			# LN: 82 | 
303   	 0093				for_4:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
304   	 0093	 90750212		i0 = i7 - (0x212)			# LN: 82 | 
305   	 0094	 88140000		a0 = xmem[i0]			# LN: 82 | 
306   	 0095	 9075010A		i0 = i7 - (0x10a)			# LN: 82 | 
307   	 0096	 89140000		a1 = xmem[i0]			# LN: 82 | 
308   	 0097	 00004F08		a0 - a1			# LN: 82 | 
309   	 0098	 84C800B2		if (a >= 0) jmp (for_end_4)			# LN: 82 | 
310   	 0099				cline_82_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
311   	 0099	 90750109		i0 = i7 - (0x109)			# LN: 84 | 
312   	 009A	 B0140000		i0 = xmem[i0]			# LN: 84 | 
313   	 009B	 80880000		call (_cl_wavread_recvsample)			# LN: 84 | 
314   	 009C	 90750213		i0 = i7 - (0x213)			# LN: 84 | 
315   	 009D	 98540000		xmem[i0] = a0h			# LN: 84 | 
316   	 009E				cline_84_0:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
317   	 009E	 90750212		i0 = i7 - (0x212)			# LN: 85 | 
318   	 009F	 88140000		a0 = xmem[i0]			# LN: 85 | 
319   	 00A0	 00004EC0		a0 = a0 << 4			# LN: 85 | 
320   	 00A1	 48707FFF		i0 = a0			# LN: 85 | 
321   	 00A2	 91750211		i1 = i7 - (0x211)			# LN: 85 | 
322   	 00A3	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 85 | 
323   	 00A4	 88140001		a0 = xmem[i1]			# LN: 85 | 
324   	 00A5	 09707FFF		a1 = i0			# LN: 85 | 
325   	 00A6	 00004480		a0 = a1 + a0			# LN: 85 | 
326   	 00A7	 98090030		AnyReg(i0, a0h)			# LN: 85 | 
327   	 00A8	 91750213		i1 = i7 - (0x213)			# LN: 85 | 
328   	 00A9	 88140001		a0 = xmem[i1]			# LN: 85 | 
329   	 00AA	 98540000		xmem[i0] = a0h			# LN: 85 | 
330   	 00AB				cline_85_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
331   	 00AB				init_latch_label_2:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
332   	 00AB	 90750212		i0 = i7 - (0x212)			# LN: 82 | 
333   	 00AC	 88140000		a0 = xmem[i0]			# LN: 82 | 
334   	 00AD	 894A0001		uhalfword(a1) = (0x1)			# LN: 82 | 
335   	 00AE	 00004408		a0 = a0 + a1			# LN: 82 | 
336   	 00AF	 90750212		i0 = i7 - (0x212)			# LN: 82 | 
337   	 00B0	 98540000		xmem[i0] = a0h			# LN: 82 | 
338   	 00B1	 80080093		jmp (for_4)			# LN: 82 | 
339   	 00B2				cline_82_1:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
340   	 00B2				init_latch_label_3:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
341   	 00B2				for_end_4:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
342   	 00B2	 90750211		i0 = i7 - (0x211)			# LN: 80 | 
343   	 00B3	 88140000		a0 = xmem[i0]			# LN: 80 | 
344   	 00B4	 894A0001		uhalfword(a1) = (0x1)			# LN: 80 | 
345   	 00B5	 00004408		a0 = a0 + a1			# LN: 80 | 
346   	 00B6	 90750211		i0 = i7 - (0x211)			# LN: 80 | 
347   	 00B7				label_end_94:			# LN: 80 | CYCLE: 5 | RULES: ()
348   	 00B7	 98540000		xmem[i0] = a0h			# LN: 80 | 
349   	 00B8				cline_80_1:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
350   	 00B8				for_end_3:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
351   	 00B8	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 90 | 
352   	 00B9	 A1050000		i1 = (0) + (_sampleBuffer)			# LN: 90 | 
353   	 00BA	 80880000		call (_gainProcessing)			# LN: 90 | 
354   	 00BB				cline_90_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
355   	 00BB	 90750211		i0 = i7 - (0x211)			# LN: 92 | 
356   	 00BC	 00004DC0		a0 = 0			# LN: 92 | 
357   	 00BD	 98540000		xmem[i0] = a0h			# LN: 92 | 
358   	 00BE	 8100014A		do (0x10), label_end_95			# LN: 92 | 
359   	 00BF				cline_92_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
360   	 00BF				label_begin_95:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
361   	 00BF	 90750212		i0 = i7 - (0x212)			# LN: 94 | 
362   	 00C0	 00004DC0		a0 = 0			# LN: 94 | 
363   	 00C1	 98540000		xmem[i0] = a0h			# LN: 94 | 
364   	 00C2				for_6:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
365   	 00C2	 90750212		i0 = i7 - (0x212)			# LN: 94 | 
366   	 00C3	 88140000		a0 = xmem[i0]			# LN: 94 | 
367   	 00C4	 9075020E		i0 = i7 - (0x20e)			# LN: 94 | 
368   	 00C5	 89140000		a1 = xmem[i0]			# LN: 94 | 
369   	 00C6	 00004F08		a0 - a1			# LN: 94 | 
370   	 00C7	 84C80145		if (a >= 0) jmp (for_end_6)			# LN: 94 | 
371   	 00C8				cline_94_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
372   	 00C8	 90750214		i0 = i7 - (0x214)			# LN: 96 | 
373   	 00C9	 00004DC0		a0 = 0			# LN: 96 | 
374   	 00CA	 98540000		xmem[i0] = a0h			# LN: 96 | 
375   	 00CB				cline_96_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
376   	 00CB				switch_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
377   	 00CB	 90750005		i0 = i7 - (0x5)			# LN: 97 | 
378   	 00CC	 88140000		a0 = xmem[i0]			# LN: 97 | 
379   	 00CD	 00004E80		a0 & a0			# LN: 97 | 
380   	 00CE	 840800DA		if (a == 0) jmp (case_0)			# LN: 97 | 
381   	 00CF	 90750005		i0 = i7 - (0x5)			# LN: 97 | 
382   	 00D0	 88140000		a0 = xmem[i0]			# LN: 97 | 
383   	 00D1	 894A0001		uhalfword(a1) = (0x1)			# LN: 97 | 
384   	 00D2	 00004F08		a0 - a1			# LN: 97 | 
385   	 00D3	 840800EC		if (a == 0) jmp (case_1)			# LN: 97 | 
386   	 00D4	 90750005		i0 = i7 - (0x5)			# LN: 97 | 
387   	 00D5	 88140000		a0 = xmem[i0]			# LN: 97 | 
388   	 00D6	 894A0002		uhalfword(a1) = (0x2)			# LN: 97 | 
389   	 00D7	 00004F08		a0 - a1			# LN: 97 | 
390   	 00D8	 840800FE		if (a == 0) jmp (case_2)			# LN: 97 | 
391   	 00D9	 8008012B		jmp (default_0)			# LN: 97 | 
392   	 00DA				cline_97_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
393   	 00DA				case_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
394   	 00DA	 90750212		i0 = i7 - (0x212)			# LN: 100 | 
395   	 00DB	 88140000		a0 = xmem[i0]			# LN: 100 | 
396   	 00DC	 00004E80		a0 & a0			# LN: 100 | 
397   	 00DD	 844800E2		if (a != 0) jmp (else_2)			# LN: 100 | 
398   	 00DE	 90750214		i0 = i7 - (0x214)			# LN: 100 | 
399   	 00DF	 00004DC0		a0 = 0			# LN: 100 | 
400   	 00E0	 98540000		xmem[i0] = a0h			# LN: 100 | 
401   	 00E1	 800800E2		jmp (endif_2)			# LN: 100 | 
402   	 00E2				cline_100_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
403   	 00E2				endif_2:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
404   	 00E2				else_2:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
405   	 00E2	 90750212		i0 = i7 - (0x212)			# LN: 101 | 
406   	 00E3	 88140000		a0 = xmem[i0]			# LN: 101 | 
407   	 00E4	 894A0001		uhalfword(a1) = (0x1)			# LN: 101 | 
408   	 00E5	 00004F08		a0 - a1			# LN: 101 | 
409   	 00E6	 844800EB		if (a != 0) jmp (else_3)			# LN: 101 | 
410   	 00E7	 90750214		i0 = i7 - (0x214)			# LN: 101 | 
411   	 00E8	 884A0001		uhalfword(a0) = (0x1)			# LN: 101 | 
412   	 00E9	 98540000		xmem[i0] = a0h			# LN: 101 | 
413   	 00EA	 800800EB		jmp (endif_3)			# LN: 101 | 
414   	 00EB				cline_101_0:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
415   	 00EB				endif_3:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
416   	 00EB				else_3:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
417   	 00EB	 8008012C		jmp (switch_end_0)			# LN: 102 | 
418   	 00EC				cline_102_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
419   	 00EC				case_1:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
420   	 00EC	 90750212		i0 = i7 - (0x212)			# LN: 104 | 
421   	 00ED	 88140000		a0 = xmem[i0]			# LN: 104 | 
422   	 00EE	 00004E80		a0 & a0			# LN: 104 | 
423   	 00EF	 844800F4		if (a != 0) jmp (else_4)			# LN: 104 | 
424   	 00F0	 90750214		i0 = i7 - (0x214)			# LN: 104 | 
425   	 00F1	 884A0003		uhalfword(a0) = (0x3)			# LN: 104 | 
426   	 00F2	 98540000		xmem[i0] = a0h			# LN: 104 | 
427   	 00F3	 800800F4		jmp (endif_4)			# LN: 104 | 
428   	 00F4				cline_104_0:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
429   	 00F4				endif_4:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
430   	 00F4				else_4:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
431   	 00F4	 90750212		i0 = i7 - (0x212)			# LN: 105 | 
432   	 00F5	 88140000		a0 = xmem[i0]			# LN: 105 | 
433   	 00F6	 894A0001		uhalfword(a1) = (0x1)			# LN: 105 | 
434   	 00F7	 00004F08		a0 - a1			# LN: 105 | 
435   	 00F8	 844800FD		if (a != 0) jmp (else_5)			# LN: 105 | 
436   	 00F9	 90750214		i0 = i7 - (0x214)			# LN: 105 | 
437   	 00FA	 884A0004		uhalfword(a0) = (0x4)			# LN: 105 | 
438   	 00FB	 98540000		xmem[i0] = a0h			# LN: 105 | 
439   	 00FC	 800800FD		jmp (endif_5)			# LN: 105 | 
440   	 00FD				cline_105_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
441   	 00FD				endif_5:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
442   	 00FD				else_5:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
443   	 00FD	 8008012C		jmp (switch_end_0)			# LN: 106 | 
444   	 00FE				cline_106_0:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
445   	 00FE				case_2:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
446   	 00FE	 90750212		i0 = i7 - (0x212)			# LN: 108 | 
447   	 00FF	 88140000		a0 = xmem[i0]			# LN: 108 | 
448   	 0100	 00004E80		a0 & a0			# LN: 108 | 
449   	 0101	 84480106		if (a != 0) jmp (else_6)			# LN: 108 | 
450   	 0102	 90750214		i0 = i7 - (0x214)			# LN: 108 | 
451   	 0103	 00004DC0		a0 = 0			# LN: 108 | 
452   	 0104	 98540000		xmem[i0] = a0h			# LN: 108 | 
453   	 0105	 80080106		jmp (endif_6)			# LN: 108 | 
454   	 0106				cline_108_0:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
455   	 0106				endif_6:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
456   	 0106				else_6:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
457   	 0106	 90750212		i0 = i7 - (0x212)			# LN: 109 | 
458   	 0107	 88140000		a0 = xmem[i0]			# LN: 109 | 
459   	 0108	 894A0001		uhalfword(a1) = (0x1)			# LN: 109 | 
460   	 0109	 00004F08		a0 - a1			# LN: 109 | 
461   	 010A	 8448010F		if (a != 0) jmp (else_7)			# LN: 109 | 
462   	 010B	 90750214		i0 = i7 - (0x214)			# LN: 109 | 
463   	 010C	 884A0001		uhalfword(a0) = (0x1)			# LN: 109 | 
464   	 010D	 98540000		xmem[i0] = a0h			# LN: 109 | 
465   	 010E	 8008010F		jmp (endif_7)			# LN: 109 | 
466   	 010F				cline_109_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
467   	 010F				endif_7:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
468   	 010F				else_7:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
469   	 010F	 90750212		i0 = i7 - (0x212)			# LN: 110 | 
470   	 0110	 88140000		a0 = xmem[i0]			# LN: 110 | 
471   	 0111	 894A0002		uhalfword(a1) = (0x2)			# LN: 110 | 
472   	 0112	 00004F08		a0 - a1			# LN: 110 | 
473   	 0113	 84480118		if (a != 0) jmp (else_8)			# LN: 110 | 
474   	 0114	 90750214		i0 = i7 - (0x214)			# LN: 110 | 
475   	 0115	 884A0002		uhalfword(a0) = (0x2)			# LN: 110 | 
476   	 0116	 98540000		xmem[i0] = a0h			# LN: 110 | 
477   	 0117	 80080118		jmp (endif_8)			# LN: 110 | 
478   	 0118				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
479   	 0118				endif_8:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
480   	 0118				else_8:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
481   	 0118	 90750212		i0 = i7 - (0x212)			# LN: 111 | 
482   	 0119	 88140000		a0 = xmem[i0]			# LN: 111 | 
483   	 011A	 894A0003		uhalfword(a1) = (0x3)			# LN: 111 | 
484   	 011B	 00004F08		a0 - a1			# LN: 111 | 
485   	 011C	 84480121		if (a != 0) jmp (else_9)			# LN: 111 | 
486   	 011D	 90750214		i0 = i7 - (0x214)			# LN: 111 | 
487   	 011E	 884A0003		uhalfword(a0) = (0x3)			# LN: 111 | 
488   	 011F	 98540000		xmem[i0] = a0h			# LN: 111 | 
489   	 0120	 80080121		jmp (endif_9)			# LN: 111 | 
490   	 0121				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
491   	 0121				endif_9:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
492   	 0121				else_9:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
493   	 0121	 90750212		i0 = i7 - (0x212)			# LN: 112 | 
494   	 0122	 88140000		a0 = xmem[i0]			# LN: 112 | 
495   	 0123	 894A0004		uhalfword(a1) = (0x4)			# LN: 112 | 
496   	 0124	 00004F08		a0 - a1			# LN: 112 | 
497   	 0125	 8448012A		if (a != 0) jmp (else_10)			# LN: 112 | 
498   	 0126	 90750214		i0 = i7 - (0x214)			# LN: 112 | 
499   	 0127	 884A0004		uhalfword(a0) = (0x4)			# LN: 112 | 
500   	 0128	 98540000		xmem[i0] = a0h			# LN: 112 | 
501   	 0129	 8008012A		jmp (endif_10)			# LN: 112 | 
502   	 012A				cline_112_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
503   	 012A				endif_10:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
504   	 012A				else_10:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
505   	 012A	 8008012B		jmp (_8C56D8)			# LN: 113 | 
506   	 012B				cline_97_1:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
507   	 012B				_8C56D8:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
508   	 012B				default_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
509   	 012B	 8008012C		jmp (switch_end_0)			# LN: 114 | 
510   	 012C				cline_114_0:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
511   	 012C				switch_end_0:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
512   	 012C	 90750214		i0 = i7 - (0x214)			# LN: 116 | 
513   	 012D	 88140000		a0 = xmem[i0]			# LN: 116 | 
514   	 012E	 00004EC0		a0 = a0 << 4			# LN: 116 | 
515   	 012F	 48707FFF		i0 = a0			# LN: 116 | 
516   	 0130	 91750211		i1 = i7 - (0x211)			# LN: 116 | 
517   	 0131	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 116 | 
518   	 0132	 88140001		a0 = xmem[i1]			# LN: 116 | 
519   	 0133	 09707FFF		a1 = i0			# LN: 116 | 
520   	 0134	 00004480		a0 = a1 + a0			# LN: 116 | 
521   	 0135	 98090030		AnyReg(i0, a0h)			# LN: 116 | 
522   	 0136	 91750213		i1 = i7 - (0x213)			# LN: 116 | 
523   	 0137	 88140000		a0 = xmem[i0]			# LN: 116 | 
524   	 0138	 98540001		xmem[i1] = a0h			# LN: 116 | 
525   	 0139				cline_116_0:			/* LN: 117 | CYCLE: 0 | RULES: () */ 
526   	 0139	 9075020F		i0 = i7 - (0x20f)			# LN: 117 | 
527   	 013A	 91750213		i1 = i7 - (0x213)			# LN: 117 | 
528   	 013B	 88140001		a0 = xmem[i1]			# LN: 117 | 
529   	 013C	 B0140000		i0 = xmem[i0]			# LN: 117 | 
530   	 013D	 80880000		call (_cl_wavwrite_sendsample)			# LN: 117 | 
531   	 013E				cline_117_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
532   	 013E				init_latch_label_4:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
533   	 013E	 90750212		i0 = i7 - (0x212)			# LN: 94 | 
534   	 013F	 88140000		a0 = xmem[i0]			# LN: 94 | 
535   	 0140	 894A0001		uhalfword(a1) = (0x1)			# LN: 94 | 
536   	 0141	 00004408		a0 = a0 + a1			# LN: 94 | 
537   	 0142	 90750212		i0 = i7 - (0x212)			# LN: 94 | 
538   	 0143	 98540000		xmem[i0] = a0h			# LN: 94 | 
539   	 0144	 800800C2		jmp (for_6)			# LN: 94 | 
540   	 0145				cline_94_1:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
541   	 0145				init_latch_label_5:			/* LN: 119 | CYCLE: 0 | RULES: () */ 
542   	 0145				for_end_6:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
543   	 0145	 90750211		i0 = i7 - (0x211)			# LN: 92 | 
544   	 0146	 88140000		a0 = xmem[i0]			# LN: 92 | 
545   	 0147	 894A0001		uhalfword(a1) = (0x1)			# LN: 92 | 
546   	 0148	 00004408		a0 = a0 + a1			# LN: 92 | 
547   	 0149	 90750211		i0 = i7 - (0x211)			# LN: 92 | 
548   	 014A				label_end_95:			# LN: 92 | CYCLE: 5 | RULES: ()
549   	 014A	 98540000		xmem[i0] = a0h			# LN: 92 | 
550   	 014B				cline_92_1:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
551   	 014B				init_latch_label_6:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
552   	 014B				for_end_5:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
553   	 014B	 90750210		i0 = i7 - (0x210)			# LN: 78 | 
554   	 014C	 88140000		a0 = xmem[i0]			# LN: 78 | 
555   	 014D	 894A0001		uhalfword(a1) = (0x1)			# LN: 78 | 
556   	 014E	 00004408		a0 = a0 + a1			# LN: 78 | 
557   	 014F	 90750210		i0 = i7 - (0x210)			# LN: 78 | 
558   	 0150	 98540000		xmem[i0] = a0h			# LN: 78 | 
559   	 0151	 80080084		jmp (for_2)			# LN: 78 | 
560   	 0152				cline_78_1:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
561   	 0152				for_end_2:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
562   	 0152	 90750109		i0 = i7 - (0x109)			# LN: 125 | 
563   	 0153	 B0140000		i0 = xmem[i0]			# LN: 125 | 
564   	 0154	 80880000		call (_cl_wavread_close)			# LN: 125 | 
565   	 0155				cline_125_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
566   	 0155	 9075020F		i0 = i7 - (0x20f)			# LN: 126 | 
567   	 0156	 B0140000		i0 = xmem[i0]			# LN: 126 | 
568   	 0157	 80880000		call (_cl_wavwrite_close)			# LN: 126 | 
569   	 0158				cline_126_0:			/* LN: 129 | CYCLE: 0 | RULES: () */ 
570   	 0158	 00004DC0		a0 = 0			# LN: 129 | 
571   	 0159	 8008015A		jmp (__epilogue_270)			# LN: 129 | 
572   	 015A				cline_129_0:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
573   	 015A				__epilogue_270:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
574   	 015A	 97750214		i7 = i7 - (0x214)			# LN: 130 | 
575   	 015B	 02177FFF		i7 -= 1			# LN: 130 | 
576   	 015C	 81880000		ret			# LN: 130 | 
577   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_8C56D8                                                                         			         Relocatable         main_GEN_0005:012BH
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_270                                                                  			         Relocatable         main_GEN_0005:015AH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0001:0000H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_gainProcessing                                                                 					 External   
_initialize                                                                     					 External   
_main                                                                           			  Public Relocatable       main_GEN_0005:0000H
_printf                                                                         					 External   
_sampleBuffer                                                                   			         Relocatable         main_GEN_0002:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0003:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0004:0000H
case_0                                                                          			         Relocatable         main_GEN_0005:00DAH
case_1                                                                          			         Relocatable         main_GEN_0005:00ECH
case_2                                                                          			         Relocatable         main_GEN_0005:00FEH
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0005:00E2H
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0005:00EBH
cline_102_0                                                                     			  Unused Relocatable        main_GEN_0005:00ECH
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0005:00F4H
cline_105_0                                                                     			  Unused Relocatable        main_GEN_0005:00FDH
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0005:00FEH
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0005:0106H
cline_109_0                                                                     			  Unused Relocatable        main_GEN_0005:010FH
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0005:0118H
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0005:0121H
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0005:012AH
cline_114_0                                                                     			  Unused Relocatable        main_GEN_0005:012CH
cline_116_0                                                                     			  Unused Relocatable        main_GEN_0005:0139H
cline_117_0                                                                     			  Unused Relocatable        main_GEN_0005:013EH
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0005:0155H
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0005:0158H
cline_129_0                                                                     			  Unused Relocatable        main_GEN_0005:015AH
cline_28_0                                                                      			  Unused Relocatable        main_GEN_0005:000AH
cline_29_0                                                                      			  Unused Relocatable        main_GEN_0005:000DH
cline_30_0                                                                      			  Unused Relocatable        main_GEN_0005:0010H
cline_31_0                                                                      			  Unused Relocatable        main_GEN_0005:0013H
cline_34_0                                                                      			  Unused Relocatable        main_GEN_0005:0017H
cline_34_1                                                                      			  Unused Relocatable        main_GEN_0005:0033H
cline_35_0                                                                      			  Unused Relocatable        main_GEN_0005:001BH
cline_35_1                                                                      			  Unused Relocatable        main_GEN_0005:002DH
cline_36_0                                                                      			  Unused Relocatable        main_GEN_0005:0027H
cline_40_0                                                                      			  Unused Relocatable        main_GEN_0005:003AH
cline_41_0                                                                      			  Unused Relocatable        main_GEN_0005:003FH
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0005:0043H
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0005:0045H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0005:0047H
cline_51_0                                                                      			  Unused Relocatable        main_GEN_0005:004CH
cline_52_0                                                                      			  Unused Relocatable        main_GEN_0005:0051H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0005:0056H
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0005:005BH
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0005:0063H
cline_60_0                                                                      			  Unused Relocatable        main_GEN_0005:0067H
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0005:0072H
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0005:0076H
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0005:0078H
cline_65_0                                                                      			  Unused Relocatable        main_GEN_0005:007AH
cline_68_0                                                                      			  Unused Relocatable        main_GEN_0005:0081H
cline_78_0                                                                      			  Unused Relocatable        main_GEN_0005:008CH
cline_78_1                                                                      			  Unused Relocatable        main_GEN_0005:0152H
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0005:0090H
cline_80_1                                                                      			  Unused Relocatable        main_GEN_0005:00B8H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0005:0099H
cline_82_1                                                                      			  Unused Relocatable        main_GEN_0005:00B2H
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0005:009EH
cline_85_0                                                                      			  Unused Relocatable        main_GEN_0005:00ABH
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0005:00BBH
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0005:00BFH
cline_92_1                                                                      			  Unused Relocatable        main_GEN_0005:014BH
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0005:00C8H
cline_94_1                                                                      			  Unused Relocatable        main_GEN_0005:0145H
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0005:00CBH
cline_97_0                                                                      			  Unused Relocatable        main_GEN_0005:00DAH
cline_97_1                                                                      			  Unused Relocatable        main_GEN_0005:012BH
cline_9_0                                                                       			  Unused Relocatable        main_GEN_0005:0007H
default_0                                                                       			         Relocatable         main_GEN_0005:012BH
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0005:0047H
else_1                                                                          			         Relocatable         main_GEN_0005:007AH
else_10                                                                         			         Relocatable         main_GEN_0005:012AH
else_2                                                                          			         Relocatable         main_GEN_0005:00E2H
else_3                                                                          			         Relocatable         main_GEN_0005:00EBH
else_4                                                                          			         Relocatable         main_GEN_0005:00F4H
else_5                                                                          			         Relocatable         main_GEN_0005:00FDH
else_6                                                                          			         Relocatable         main_GEN_0005:0106H
else_7                                                                          			         Relocatable         main_GEN_0005:010FH
else_8                                                                          			         Relocatable         main_GEN_0005:0118H
else_9                                                                          			         Relocatable         main_GEN_0005:0121H
endif_0                                                                         			  Unused Relocatable        main_GEN_0005:0047H
endif_1                                                                         			  Unused Relocatable        main_GEN_0005:007AH
endif_10                                                                        			         Relocatable         main_GEN_0005:012AH
endif_2                                                                         			         Relocatable         main_GEN_0005:00E2H
endif_3                                                                         			         Relocatable         main_GEN_0005:00EBH
endif_4                                                                         			         Relocatable         main_GEN_0005:00F4H
endif_5                                                                         			         Relocatable         main_GEN_0005:00FDH
endif_6                                                                         			         Relocatable         main_GEN_0005:0106H
endif_7                                                                         			         Relocatable         main_GEN_0005:010FH
endif_8                                                                         			         Relocatable         main_GEN_0005:0118H
endif_9                                                                         			         Relocatable         main_GEN_0005:0121H
for_2                                                                           			         Relocatable         main_GEN_0005:0084H
for_4                                                                           			         Relocatable         main_GEN_0005:0093H
for_6                                                                           			         Relocatable         main_GEN_0005:00C2H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0005:0033H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0005:002DH
for_end_2                                                                       			         Relocatable         main_GEN_0005:0152H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0005:00B8H
for_end_4                                                                       			         Relocatable         main_GEN_0005:00B2H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0005:014BH
for_end_6                                                                       			         Relocatable         main_GEN_0005:0145H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0005:0027H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0005:002DH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0005:00ABH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0005:00B2H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0005:013EH
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0005:0145H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0005:014BH
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0005:001BH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0005:0017H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0005:0090H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0005:00BFH
label_end_92                                                                    			         Relocatable         main_GEN_0005:002CH
label_end_93                                                                    			         Relocatable         main_GEN_0005:0032H
label_end_94                                                                    			         Relocatable         main_GEN_0005:00B7H
label_end_95                                                                    			         Relocatable         main_GEN_0005:014AH
switch_0                                                                        			  Unused Relocatable        main_GEN_0005:00CBH
switch_end_0                                                                    			         Relocatable         main_GEN_0005:012CH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0080H	 main_GEN_0002                           			 X_OVLY                                  
0021H	 main_GEN_0003                           			 X_OVLY                                  
0021H	 main_GEN_0004                           			 X_OVLY                                  
015DH	 main_GEN_0005                           			 CODE_OVLY                               
