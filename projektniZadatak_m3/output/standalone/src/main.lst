1     	 0000					.public _sampleBuffer
2     	 0000					.extern _cl_wavread_bits_per_sample
3     	 0000					.extern _cl_wavread_close
4     	 0000					.extern _cl_wavread_frame_rate
5     	 0000					.extern _cl_wavread_getnchannels
6     	 0000					.extern _cl_wavread_number_of_frames
7     	 0000					.extern _cl_wavread_open
8     	 0000					.extern _cl_wavread_recvsample
9     	 0000					.extern _cl_wavwrite_close
10    	 0000					.extern _cl_wavwrite_open
11    	 0000					.extern _cl_wavwrite_sendsample
12    	 0000					.extern _gainProcessing
13    	 0000					.extern _initialize
14    	 0000					.public _main
15    	 0000					.extern _printf
16    	 0000					.extern _strcpy
17    	 0000					.extern __div
18    							.xdata_ovly
18     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
19    	 0000				__extractedConst_0_1
20    	 0000					.dw  (0x4026aa8e)
	 0000	 4026AA8E	 
21    							.xdata_ovly
21     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
22    	 0000				__extractedConst_1_1
23    	 0000					.dw  (0x5a9df97a)
	 0000	 5A9DF97A	 
24    							.ydata_ovly
24     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
25    	 0000				_sampleBuffer
26    	 0000					.bss (0x80)
27    							.xdata_ovly
27     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
28    	 0000				_string_const_0
29    	 0000					.dw  (0x45)
	 0000	 00000045	 
30    	 0001					.dw  (0x72)
	 0001	 00000072	 
31    	 0002					.dw  (0x72)
	 0002	 00000072	 
32    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
33    	 0004					.dw  (0x72)
	 0004	 00000072	 
34    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
35    	 0006					.dw  (0x20)
	 0006	 00000020	 
36    	 0007					.dw  (0x43)
	 0007	 00000043	 
37    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
38    	 0009					.dw  (0x75)
	 0009	 00000075	 
39    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
40    	 000B					.dw  (0x64)
	 000B	 00000064	 
41    	 000C					.dw  (0x20)
	 000C	 00000020	 
42    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
43    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
44    	 000F					.dw  (0x74)
	 000F	 00000074	 
45    	 0010					.dw  (0x20)
	 0010	 00000020	 
46    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
47    	 0012					.dw  (0x70)
	 0012	 00000070	 
48    	 0013					.dw  (0x65)
	 0013	 00000065	 
49    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
50    	 0015					.dw  (0x20)
	 0015	 00000020	 
51    	 0016					.dw  (0x77)
	 0016	 00000077	 
52    	 0017					.dw  (0x61)
	 0017	 00000061	 
53    	 0018					.dw  (0x76)
	 0018	 00000076	 
54    	 0019					.dw  (0x65)
	 0019	 00000065	 
55    	 001A					.dw  (0x66)
	 001A	 00000066	 
56    	 001B					.dw  (0x69)
	 001B	 00000069	 
57    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
58    	 001D					.dw  (0x65)
	 001D	 00000065	 
59    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
60    	 001F					.dw  (0xa)
	 001F	 0000000A	 
61    	 0020					.dw  (0x0)
	 0020	 00000000	 
62    							.xdata_ovly
62     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
63    	 0000				_string_const_1
64    	 0000					.dw  (0x45)
	 0000	 00000045	 
65    	 0001					.dw  (0x72)
	 0001	 00000072	 
66    	 0002					.dw  (0x72)
	 0002	 00000072	 
67    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
68    	 0004					.dw  (0x72)
	 0004	 00000072	 
69    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
70    	 0006					.dw  (0x20)
	 0006	 00000020	 
71    	 0007					.dw  (0x43)
	 0007	 00000043	 
72    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
73    	 0009					.dw  (0x75)
	 0009	 00000075	 
74    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
75    	 000B					.dw  (0x64)
	 000B	 00000064	 
76    	 000C					.dw  (0x20)
	 000C	 00000020	 
77    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
78    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
79    	 000F					.dw  (0x74)
	 000F	 00000074	 
80    	 0010					.dw  (0x20)
	 0010	 00000020	 
81    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
82    	 0012					.dw  (0x70)
	 0012	 00000070	 
83    	 0013					.dw  (0x65)
	 0013	 00000065	 
84    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
85    	 0015					.dw  (0x20)
	 0015	 00000020	 
86    	 0016					.dw  (0x77)
	 0016	 00000077	 
87    	 0017					.dw  (0x61)
	 0017	 00000061	 
88    	 0018					.dw  (0x76)
	 0018	 00000076	 
89    	 0019					.dw  (0x65)
	 0019	 00000065	 
90    	 001A					.dw  (0x66)
	 001A	 00000066	 
91    	 001B					.dw  (0x69)
	 001B	 00000069	 
92    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
93    	 001D					.dw  (0x65)
	 001D	 00000065	 
94    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
95    	 001F					.dw  (0xa)
	 001F	 0000000A	 
96    	 0020					.dw  (0x0)
	 0020	 00000000	 
97    							.code_ovly
97     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
98    						
99    						
100   						
101   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
102   							.if defined(_OVLY_)
103   								.if .strcmp('standalone',_OVLY_)=0
104   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
105   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
106   	 0000				dummy		.equ(__start)
107   								.else
108   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
109   						dummy		.equ(__intvec)
110   								.endif
111   								.endif
112   							.endif
113   						
114   	 0000				_main:			/* LN: 8 | CYCLE: 0 | RULES: () */ 
115   	 0000	 A6540017		xmem[i7] = b2g; i7 += 1			# LN: 8, 8 | 
116   	 0001	 9E540017		xmem[i7] = b2h; i7 += 1			# LN: 8, 8 | 
117   	 0002	 96540017		xmem[i7] = b2l; i7 += 1			# LN: 8, 8 | 
118   	 0003	 A2540017		xmem[i7] = a2g; i7 += 1			# LN: 8, 8 | 
119   	 0004	 9A540017		xmem[i7] = a2h; i7 += 1			# LN: 8, 8 | 
120   	 0005	 92540017		xmem[i7] = a2l; i7 += 1			# LN: 8, 8 | 
121   	 0006	 A3540017		xmem[i7] = a3g; i7 += 1			# LN: 8, 8 | 
122   	 0007	 9B540017		xmem[i7] = a3h; i7 += 1			# LN: 8, 8 | 
123   	 0008	 93540017		xmem[i7] = a3l; i7 += 1			# LN: 8, 8 | 
124   	 0009	 A7540017		xmem[i7] = b3g; i7 += 1			# LN: 8, 8 | 
125   	 000A	 9F540017		xmem[i7] = b3h; i7 += 1			# LN: 8, 8 | 
126   	 000B	 97540017		xmem[i7] = b3l; i7 += 1			# LN: 8, 8 | 
127   	 000C	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 8, 8 | 
128   	 000D	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 8, 8 | 
129   	 000E	 87750201		i7 = i7 + (0x201)			# LN: 8 | 
130   	 000F	 B0090038		i4 = i0			# LN: 8 | 
131   	 0010	 00004DC6		b2 = 0			# LN: 27 | 
132   	 0011	 8A040000		a2 = xmem[__extractedConst_0_1 + 0]			# LN: 28 | 
133   	 0012	 8D040000		b1 = xmem[__extractedConst_1_1 + 0]			# LN: 29 | 
134   	 0013	 00004DC0		a0 = 0			# LN: 32 | 
135   	 0014	 80800022		do (0x8), label_end_93			# LN: 32 | 
136   	 0015				label_begin_93:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
137   	 0015	 00004DC1		a1 = 0			# LN: 33 | 
138   	 0016	 81000020		do (0x10), label_end_92			# LN: 33 | 
139   	 0017				label_begin_92:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
140   	 0017	 00004C24		b0 =+ a0			# LN: 34 | 
141   	 0018	 00004EC4		b0 = b0 << 4			# LN: 34 | 
142   	 0019	 4C704DC4		i0 = b0; b0 = 0			# LN: 34, 34 | 
143   	 001A	 8B4A0001		uhalfword(a3) = (0x1)			# LN: 33 | 
144   	 001B	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 34 | 
145   	 001C	 0F707FFF		b3 = i0			# LN: 34 | 
146   	 001D	 000045AF		b3 = b3 + a1			# LN: 34 | 
147   	 001E	 9F090030		AnyReg(i0, b3h)			# LN: 34 | 
148   	 001F	 00004499		a1 = a1 + a3			# LN: 33 | 
149   	 0020				label_end_92:			# LN: 33 | CYCLE: 9 | RULES: ()
150   	 0020	 9CD40000		ymem[i0] = b0h			# LN: 34 | 
151   	 0021				init_latch_label_1:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
152   	 0021				for_end_1:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
153   	 0021	 894A0001		uhalfword(a1) = (0x1)			# LN: 32 | 
154   	 0022				label_end_93:			# LN: 32 | CYCLE: 1 | RULES: ()
155   	 0022	 00004408		a0 = a0 + a1			# LN: 32 | 
156   	 0023				for_end_0:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
157   	 0023	 B1140004		i1 = xmem[i4]			# LN: 38 | 
158   	 0024	 90750100		i0 = i7 - (256 - 0)			# LN: 38 | 
159   	 0025	 80880000		call (_strcpy)			# LN: 38 | 
160   	 0026	 90750100		i0 = i7 - (256 - 0)			# LN: 39 | 
161   	 0027	 80880000		call (_cl_wavread_open)			# LN: 39 | 
162   	 0028	 98090032		AnyReg(i2, a0h)			# LN: 39 | 
163   	 0029	 08727FFF		a0 = i2			# LN: 40 | 
164   	 002A	 00004E80		a0 & a0			# LN: 40 | 
165   	 002B	 84480030		if (a != 0) jmp (else_0)			# LN: 40 | 
166   	 002C	 A0050000		i0 = (0) + (_string_const_0)			# LN: 42 | 
167   	 002D	 80880000		call (_printf)			# LN: 42 | 
168   	 002E	 886AFFFF		halfword(a0) = (0xffff)			# LN: 43 | 
169   	 002F	 8008008D		jmp (__epilogue_270)			# LN: 43 | 
170   	 0030				endif_0:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
171   	 0030				else_0:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
172   	 0030	 B2090030		i0 = i2			# LN: 49 | 
173   	 0031	 80880000		call (_cl_wavread_getnchannels)			# LN: 49 | 
174   	 0032	 90750201		i0 = i7 - (0x201)			# LN: 49 | 
175   	 0033	 98540000		xmem[i0] = a0h			# LN: 49 | 
176   	 0034	 B2090030		i0 = i2			# LN: 50 | 
177   	 0035	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 50 | 
178   	 0036	 020C4C01		i4 += 1; a1 =+ a0			# LN: 57, 50 | 
179   	 0037	 B2090030		i0 = i2			# LN: 51 | 
180   	 0038	 80880000		call (_cl_wavread_frame_rate)			# LN: 51 | 
181   	 0039	 00004C24		b0 =+ a0			# LN: 51 | 
182   	 003A	 B2090030		i0 = i2			# LN: 52 | 
183   	 003B	 80880000		call (_cl_wavread_number_of_frames)			# LN: 52 | 
184   	 003C	 90750200		i0 = i7 - (512 - 0)			# LN: 57 | 
185   	 003D	 B1140004		i1 = xmem[i4]			# LN: 57 | 
186   	 003E	 00004C03		a3 =+ a0			# LN: 52 | 
187   	 003F	 80880000		call (_strcpy)			# LN: 57 | 
188   	 0040	 8F4A0002		uhalfword(b3) = (0x2)			# LN: 58 | 
189   	 0041	 90750200		i0 = i7 - (512 - 0)			# LN: 59 | 
190   	 0042	 00004C08		a0 =+ a1			# LN: 59 | 
191   	 0043	 00004C39		a1 =+ b3			# LN: 59 | 
192   	 0044	 80880000		call (_cl_wavwrite_open)			# LN: 59 | 
193   	 0045	 98090033		AnyReg(i3, a0h)			# LN: 59 | 
194   	 0046	 08737FFF		a0 = i3			# LN: 60 | 
195   	 0047	 00004E80		a0 & a0			# LN: 60 | 
196   	 0048	 8448004D		if (a != 0) jmp (else_1)			# LN: 60 | 
197   	 0049	 A0050000		i0 = (0) + (_string_const_1)			# LN: 62 | 
198   	 004A	 80880000		call (_printf)			# LN: 62 | 
199   	 004B	 886AFFFF		halfword(a0) = (0xffff)			# LN: 63 | 
200   	 004C	 8008008D		jmp (__epilogue_270)			# LN: 63 | 
201   	 004D				endif_1:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
202   	 004D				else_1:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
203   	 004D	 00004C29		a1 =+ b1			# LN: 66 | 
204   	 004E	 00005C10		a0 =+ a2; b0 =+ b2			# LN: 66, 66 | 
205   	 004F	 80880000		call (_initialize)			# LN: 66 | 
206   	 0050	 894A0010		uhalfword(a1) = (0x10)			# LN: 91 | 
207   	 0051	 00004C18		a0 =+ a3			# LN: 91 | 
208   	 0052	 80880000		call (__div)			# LN: 91 | 
209   	 0053	 98090030		AnyReg(i0, a0h)			# LN: 91 | 
210   	 0054	 00007FFF		nop #empty cycle
211   	 0055	 80010087		do (i0), label_end_98			# LN: 91 | 
212   	 0056				label_begin_98:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
213   	 0056	 00004DC2		a2 = 0			# LN: 93 | 
214   	 0057	 8100006A		do (0x10), label_end_95			# LN: 93 | 
215   	 0058				label_begin_95:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
216   	 0058	 90750201		i0 = i7 - (0x201)			# LN: 95 | 
217   	 0059	 18404DC4		a0 = xmem[i0]; b0 = 0			# LN: 95, 95 | 
218   	 005A	 98090030		AnyReg(i0, a0h)			# LN: 95 | 
219   	 005B	 00007FFF		nop #empty cycle
220   	 005C	 80010068		do (i0), label_end_94			# LN: 95 | 
221   	 005D				label_begin_94:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
222   	 005D	 B2090030		i0 = i2			# LN: 97 | 
223   	 005E	 80880000		call (_cl_wavread_recvsample)			# LN: 97 | 
224   	 005F	 00005C01		a1 =+ a0; b1 =+ b0			# LN: 97, 98 | 
225   	 0060	 00004EC5		b1 = b1 << 4			# LN: 98 | 
226   	 0061	 4D704C08		i0 = b1; a0 =+ a1			# LN: 98, 98 | 
227   	 0062	 894A0001		uhalfword(a1) = (0x1)			# LN: 95 | 
228   	 0063	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 98 | 
229   	 0064	 0D70442C		b1 = i0; b0 = b0 + a1			# LN: 98, 95 | 
230   	 0065	 00004529		a1 = a2 + b1			# LN: 98 | 
231   	 0066	 99090030		AnyReg(i0, a1h)			# LN: 98 | 
232   	 0067	 00007FFF		nop #empty cycle
233   	 0068				label_end_94:			# LN: 95 | CYCLE: 11 | RULES: ()
234   	 0068	 98D40000		ymem[i0] = a0h			# LN: 98 | 
235   	 0069				init_latch_label_3:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
236   	 0069				for_end_4:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
237   	 0069	 884A0001		uhalfword(a0) = (0x1)			# LN: 93 | 
238   	 006A				label_end_95:			# LN: 93 | CYCLE: 1 | RULES: ()
239   	 006A	 00004502		a2 = a2 + a0			# LN: 93 | 
240   	 006B				for_end_3:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
241   	 006B	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 105 | 
242   	 006C	 A1050000		i1 = (0) + (_sampleBuffer)			# LN: 105 | 
243   	 006D	 80880000		call (_gainProcessing)			# LN: 105 | 
244   	 006E	 00004DC1		a1 = 0			# LN: 107 | 
245   	 006F	 81000086		do (0x10), label_end_97			# LN: 107 | 
246   	 0070				label_begin_97:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
247   	 0070	 00004DC4		b0 = 0			# LN: 109 | 
248   	 0071	 80200084		do (0x2), label_end_96			# LN: 109 | 
249   	 0072				label_begin_96:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
250   	 0072	 00004DC0		a0 = 0			# LN: 111 | 
251   	 0073	 00004E84		b0 & b0			# LN: 115 | 
252   	 0074	 86480076		if (b != 0) jmp (else_2)			# LN: 115 | 
253   	 0075	 00004DC0		a0 = 0			# LN: 115 | 
254   	 0076				endif_2:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
255   	 0076				else_2:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
256   	 0076	 8D4A0001		uhalfword(b1) = (0x1)			# LN: 116 | 
257   	 0077	 00004F0C		b0 - b1			# LN: 116 | 
258   	 0078	 8648007A		if (b != 0) jmp (switch_end_1)			# LN: 116 | 
259   	 0079	 884A0001		uhalfword(a0) = (0x1)			# LN: 116 | 
260   	 007A				switch_end_1:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
261   	 007A	 00004EC0		a0 = a0 << 4			# LN: 134 | 
262   	 007B	 48717FFF		i1 = a0			# LN: 134 | 
263   	 007C	 B3090030		i0 = i3			# LN: 135 | 
264   	 007D	 81150000		i1 = i1 + (_sampleBuffer + 0)			# LN: 134 | 
265   	 007E	 08717FFF		a0 = i1			# LN: 134 | 
266   	 007F	 00004408		a0 = a0 + a1			# LN: 134 | 
267   	 0080	 98090031		AnyReg(i1, a0h)			# LN: 134 | 
268   	 0081	 884A0001		uhalfword(a0) = (0x1)			# LN: 109 | 
269   	 0082	 2D414424		b1 = ymem[i1]; b0 = b0 + a0			# LN: 134, 109 | 
270   	 0083	 00004C28		a0 =+ b1			# LN: 134 | 
271   	 0084				label_end_96:			# LN: 109 | CYCLE: 10 | RULES: ()
272   	 0084	 80880000		call (_cl_wavwrite_sendsample)			# LN: 135 | 
273   	 0085				init_latch_label_5:			/* LN: 137 | CYCLE: 0 | RULES: () */ 
274   	 0085				for_end_6:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
275   	 0085	 884A0001		uhalfword(a0) = (0x1)			# LN: 107 | 
276   	 0086				label_end_97:			# LN: 107 | CYCLE: 1 | RULES: ()
277   	 0086	 00004481		a1 = a1 + a0			# LN: 107 | 
278   	 0087				init_latch_label_6:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
279   	 0087				for_end_5:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
280   	 0087				label_end_98:			# LN: 91 | CYCLE: 0 | RULES: ()
281   	 0087	 00007FFF		nop #empty cycle
282   	 0088				for_end_2:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
283   	 0088	 B2090030		i0 = i2			# LN: 143 | 
284   	 0089	 80880000		call (_cl_wavread_close)			# LN: 143 | 
285   	 008A	 B3090030		i0 = i3			# LN: 144 | 
286   	 008B	 80880000		call (_cl_wavwrite_close)			# LN: 144 | 
287   	 008C	 00004DC0		a0 = 0			# LN: 147 | 
288   	 008D				__epilogue_270:			/* LN: 148 | CYCLE: 0 | RULES: () */ 
289   	 008D	 97750201		i7 = i7 - (0x201)			# LN: 148 | 
290   	 008E	 02177FFF		i7 -= 1			# LN: 148 | 
291   	 008F	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
292   	 0090	 B2140027		i2 = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
293   	 0091	 97140027		b3l = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
294   	 0092	 9F140027		b3h = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
295   	 0093	 A7140027		b3g = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
296   	 0094	 93140027		a3l = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
297   	 0095	 9B140027		a3h = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
298   	 0096	 A3140027		a3g = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
299   	 0097	 92140027		a2l = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
300   	 0098	 9A140027		a2h = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
301   	 0099	 A2140027		a2g = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
302   	 009A	 96140027		b2l = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
303   	 009B	 9E140027		b2h = xmem[i7]; i7 -= 1			# LN: 148, 148 | 
304   	 009C	 A6140007		b2g = xmem[i7]			# LN: 148 | 
305   	 009D	 81880000		ret			# LN: 148 | 
306   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_270                                                                  			         Relocatable         main_GEN_0005:008DH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0001:0000H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_gainProcessing                                                                 					 External   
_initialize                                                                     					 External   
_main                                                                           			  Public Relocatable       main_GEN_0005:0000H
_printf                                                                         					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0002:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0003:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0004:0000H
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0005:0030H
else_1                                                                          			         Relocatable         main_GEN_0005:004DH
else_2                                                                          			         Relocatable         main_GEN_0005:0076H
endif_0                                                                         			  Unused Relocatable        main_GEN_0005:0030H
endif_1                                                                         			  Unused Relocatable        main_GEN_0005:004DH
endif_2                                                                         			  Unused Relocatable        main_GEN_0005:0076H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0005:0023H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0005:0021H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0005:0088H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0005:006BH
for_end_4                                                                       			  Unused Relocatable        main_GEN_0005:0069H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0005:0087H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0005:0085H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0005:0021H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0005:0069H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0005:0085H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0005:0087H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0005:0017H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0005:0015H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0005:005DH
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0005:0058H
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0005:0072H
label_begin_97                                                                  			  Unused Relocatable        main_GEN_0005:0070H
label_begin_98                                                                  			  Unused Relocatable        main_GEN_0005:0056H
label_end_92                                                                    			         Relocatable         main_GEN_0005:0020H
label_end_93                                                                    			         Relocatable         main_GEN_0005:0022H
label_end_94                                                                    			         Relocatable         main_GEN_0005:0068H
label_end_95                                                                    			         Relocatable         main_GEN_0005:006AH
label_end_96                                                                    			         Relocatable         main_GEN_0005:0084H
label_end_97                                                                    			         Relocatable         main_GEN_0005:0086H
label_end_98                                                                    			         Relocatable         main_GEN_0005:0087H
switch_end_1                                                                    			         Relocatable         main_GEN_0005:007AH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0080H	 main_GEN_0002                           			 Y_OVLY                                  
0021H	 main_GEN_0003                           			 X_OVLY                                  
0021H	 main_GEN_0004                           			 X_OVLY                                  
009EH	 main_GEN_0005                           			 CODE_OVLY                               
