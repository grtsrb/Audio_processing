1     	 0000					.public _sampleBuffer
2     	 0000					.public _tremoloL
3     	 0000					.public _tremoloR
4     	 0000					.extern _cl_wavread_bits_per_sample
5     	 0000					.extern _cl_wavread_close
6     	 0000					.extern _cl_wavread_frame_rate
7     	 0000					.extern _cl_wavread_getnchannels
8     	 0000					.extern _cl_wavread_number_of_frames
9     	 0000					.extern _cl_wavread_open
10    	 0000					.extern _cl_wavread_recvsample
11    	 0000					.extern _cl_wavwrite_close
12    	 0000					.extern _cl_wavwrite_open
13    	 0000					.extern _cl_wavwrite_sendsample
14    	 0000					.extern _gainProcessing
15    	 0000					.extern _initialize
16    	 0000					.public _main
17    	 0000					.extern _printf
18    	 0000					.extern _strcpy
19    	 0000					.extern __div
20    							.xdata_ovly
20     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
21    	 0000				__extractedConst_0_1
22    	 0000					.dw  (0x4026aa8e)
	 0000	 4026AA8E	 
23    							.xdata_ovly
23     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
24    	 0000				__extractedConst_1_1
25    	 0000					.dw  (0x5a9df97a)
	 0000	 5A9DF97A	 
26    							.ydata_ovly
26     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
27    	 0000				_sampleBuffer
28    	 0000					.bss (0x80)
29    							.xdata_ovly
29     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
30    	 0000				_string_const_0
31    	 0000					.dw  (0x45)
	 0000	 00000045	 
32    	 0001					.dw  (0x72)
	 0001	 00000072	 
33    	 0002					.dw  (0x72)
	 0002	 00000072	 
34    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
35    	 0004					.dw  (0x72)
	 0004	 00000072	 
36    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
37    	 0006					.dw  (0x20)
	 0006	 00000020	 
38    	 0007					.dw  (0x43)
	 0007	 00000043	 
39    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
40    	 0009					.dw  (0x75)
	 0009	 00000075	 
41    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
42    	 000B					.dw  (0x64)
	 000B	 00000064	 
43    	 000C					.dw  (0x20)
	 000C	 00000020	 
44    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
45    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
46    	 000F					.dw  (0x74)
	 000F	 00000074	 
47    	 0010					.dw  (0x20)
	 0010	 00000020	 
48    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
49    	 0012					.dw  (0x70)
	 0012	 00000070	 
50    	 0013					.dw  (0x65)
	 0013	 00000065	 
51    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
52    	 0015					.dw  (0x20)
	 0015	 00000020	 
53    	 0016					.dw  (0x77)
	 0016	 00000077	 
54    	 0017					.dw  (0x61)
	 0017	 00000061	 
55    	 0018					.dw  (0x76)
	 0018	 00000076	 
56    	 0019					.dw  (0x65)
	 0019	 00000065	 
57    	 001A					.dw  (0x66)
	 001A	 00000066	 
58    	 001B					.dw  (0x69)
	 001B	 00000069	 
59    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
60    	 001D					.dw  (0x65)
	 001D	 00000065	 
61    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
62    	 001F					.dw  (0xa)
	 001F	 0000000A	 
63    	 0020					.dw  (0x0)
	 0020	 00000000	 
64    							.xdata_ovly
64     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
65    	 0000				_string_const_1
66    	 0000					.dw  (0x45)
	 0000	 00000045	 
67    	 0001					.dw  (0x72)
	 0001	 00000072	 
68    	 0002					.dw  (0x72)
	 0002	 00000072	 
69    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
70    	 0004					.dw  (0x72)
	 0004	 00000072	 
71    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
72    	 0006					.dw  (0x20)
	 0006	 00000020	 
73    	 0007					.dw  (0x43)
	 0007	 00000043	 
74    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
75    	 0009					.dw  (0x75)
	 0009	 00000075	 
76    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
77    	 000B					.dw  (0x64)
	 000B	 00000064	 
78    	 000C					.dw  (0x20)
	 000C	 00000020	 
79    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
80    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
81    	 000F					.dw  (0x74)
	 000F	 00000074	 
82    	 0010					.dw  (0x20)
	 0010	 00000020	 
83    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
84    	 0012					.dw  (0x70)
	 0012	 00000070	 
85    	 0013					.dw  (0x65)
	 0013	 00000065	 
86    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
87    	 0015					.dw  (0x20)
	 0015	 00000020	 
88    	 0016					.dw  (0x77)
	 0016	 00000077	 
89    	 0017					.dw  (0x61)
	 0017	 00000061	 
90    	 0018					.dw  (0x76)
	 0018	 00000076	 
91    	 0019					.dw  (0x65)
	 0019	 00000065	 
92    	 001A					.dw  (0x66)
	 001A	 00000066	 
93    	 001B					.dw  (0x69)
	 001B	 00000069	 
94    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
95    	 001D					.dw  (0x65)
	 001D	 00000065	 
96    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
97    	 001F					.dw  (0xa)
	 001F	 0000000A	 
98    	 0020					.dw  (0x0)
	 0020	 00000000	 
99    							.ydata_ovly
99     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
100   	 0000				_tremoloL
101   	 0000					.bss (0x6)
102   							.ydata_ovly
102    >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
103   	 0000				_tremoloR
104   	 0000					.bss (0x6)
105   							.code_ovly
105    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
106   						
107   						
108   						
109   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
110   							.if defined(_OVLY_)
111   								.if .strcmp('standalone',_OVLY_)=0
112   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
113   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
114   	 0000				dummy		.equ(__start)
115   								.else
116   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
117   						dummy		.equ(__intvec)
118   								.endif
119   								.endif
120   							.endif
121   						
122   	 0000				_main:			/* LN: 11 | CYCLE: 0 | RULES: () */ 
123   	 0000	 BB540007		xmem[i7] = i7			# LN: 11 | 
124   	 0001	 020F7FFF		i7 += 1			# LN: 11 | 
125   	 0002	 87750214		i7 = i7 + (0x214)			# LN: 11 | 
126   	 0003	 91750001		i1 = i7 - (0x1)			# LN: 11 | 
127   	 0004	 98540001		xmem[i1] = a0h			# LN: 11 | 
128   	 0005	 91750002		i1 = i7 - (0x2)			# LN: 11 | 
129   	 0006	 B0540001		xmem[i1] = i0			# LN: 11 | 
130   	 0007				cline_11_0:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
131   	 0007	 88040000		a0 = xmem[__extractedConst_0_1 + 0]			# LN: 30 | 
132   	 0008	 90750003		i0 = i7 - (0x3)			# LN: 30 | 
133   	 0009	 98540000		xmem[i0] = a0h			# LN: 30 | 
134   	 000A				cline_30_0:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
135   	 000A	 88040000		a0 = xmem[__extractedConst_1_1 + 0]			# LN: 31 | 
136   	 000B	 90750004		i0 = i7 - (0x4)			# LN: 31 | 
137   	 000C	 98540000		xmem[i0] = a0h			# LN: 31 | 
138   	 000D				cline_31_0:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
139   	 000D	 90750005		i0 = i7 - (0x5)			# LN: 32 | 
140   	 000E	 884A0001		uhalfword(a0) = (0x1)			# LN: 32 | 
141   	 000F	 98540000		xmem[i0] = a0h			# LN: 32 | 
142   	 0010				cline_32_0:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
143   	 0010	 90750006		i0 = i7 - (0x6)			# LN: 33 | 
144   	 0011	 884A0002		uhalfword(a0) = (0x2)			# LN: 33 | 
145   	 0012	 98540000		xmem[i0] = a0h			# LN: 33 | 
146   	 0013				cline_33_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
147   	 0013	 90750007		i0 = i7 - (0x7)			# LN: 36 | 
148   	 0014	 00004DC0		a0 = 0			# LN: 36 | 
149   	 0015	 98540000		xmem[i0] = a0h			# LN: 36 | 
150   	 0016	 80800032		do (0x8), label_end_93			# LN: 36 | 
151   	 0017				cline_36_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
152   	 0017				label_begin_93:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
153   	 0017	 90750008		i0 = i7 - (0x8)			# LN: 37 | 
154   	 0018	 00004DC0		a0 = 0			# LN: 37 | 
155   	 0019	 98540000		xmem[i0] = a0h			# LN: 37 | 
156   	 001A	 8100002C		do (0x10), label_end_92			# LN: 37 | 
157   	 001B				cline_37_0:			/* LN: 38 | CYCLE: 0 | RULES: () */ 
158   	 001B				label_begin_92:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
159   	 001B	 90750007		i0 = i7 - (0x7)			# LN: 38 | 
160   	 001C	 18404DC1		a0 = xmem[i0]; a1 = 0			# LN: 38, 38 | 
161   	 001D	 00004EC0		a0 = a0 << 4			# LN: 38 | 
162   	 001E	 48707FFF		i0 = a0			# LN: 38 | 
163   	 001F	 91750008		i1 = i7 - (0x8)			# LN: 38 | 
164   	 0020	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 38 | 
165   	 0021	 88140001		a0 = xmem[i1]			# LN: 38 | 
166   	 0022	 0C707FFF		b0 = i0			# LN: 38 | 
167   	 0023	 00004420		a0 = a0 + b0			# LN: 38 | 
168   	 0024	 98090030		AnyReg(i0, a0h)			# LN: 38 | 
169   	 0025	 00007FFF		nop #empty cycle
170   	 0026	 99D40000		ymem[i0] = a1h			# LN: 38 | 
171   	 0027				cline_38_0:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
172   	 0027				init_latch_label_0:			/* LN: 38 | CYCLE: 0 | RULES: () */ 
173   	 0027	 90750008		i0 = i7 - (0x8)			# LN: 37 | 
174   	 0028	 88140000		a0 = xmem[i0]			# LN: 37 | 
175   	 0029	 894A0001		uhalfword(a1) = (0x1)			# LN: 37 | 
176   	 002A	 00004408		a0 = a0 + a1			# LN: 37 | 
177   	 002B	 90750008		i0 = i7 - (0x8)			# LN: 37 | 
178   	 002C				label_end_92:			# LN: 37 | CYCLE: 5 | RULES: ()
179   	 002C	 98540000		xmem[i0] = a0h			# LN: 37 | 
180   	 002D				cline_37_1:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
181   	 002D				init_latch_label_1:			/* LN: 38 | CYCLE: 0 | RULES: () */ 
182   	 002D				for_end_1:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
183   	 002D	 90750007		i0 = i7 - (0x7)			# LN: 36 | 
184   	 002E	 88140000		a0 = xmem[i0]			# LN: 36 | 
185   	 002F	 894A0001		uhalfword(a1) = (0x1)			# LN: 36 | 
186   	 0030	 00004408		a0 = a0 + a1			# LN: 36 | 
187   	 0031	 90750007		i0 = i7 - (0x7)			# LN: 36 | 
188   	 0032				label_end_93:			# LN: 36 | CYCLE: 5 | RULES: ()
189   	 0032	 98540000		xmem[i0] = a0h			# LN: 36 | 
190   	 0033				cline_36_1:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
191   	 0033				for_end_0:			/* LN: 36 | CYCLE: 0 | RULES: () */ 
192   	 0033	 90750002		i0 = i7 - (0x2)			# LN: 42 | 
193   	 0034	 B0140000		i0 = xmem[i0]			# LN: 42 | 
194   	 0035	 91750108		i1 = i7 - (264 - 0)			# LN: 42 | 
195   	 0036	 B8140000		i4 = xmem[i0]			# LN: 42 | 
196   	 0037	 B1090030		i0 = i1			# LN: 42 | 
197   	 0038	 B8090031		i1 = i4			# LN: 42 | 
198   	 0039	 80880000		call (_strcpy)			# LN: 42 | 
199   	 003A				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
200   	 003A	 90750108		i0 = i7 - (264 - 0)			# LN: 43 | 
201   	 003B	 80880000		call (_cl_wavread_open)			# LN: 43 | 
202   	 003C	 98090030		AnyReg(i0, a0h)			# LN: 43 | 
203   	 003D	 91750109		i1 = i7 - (0x109)			# LN: 43 | 
204   	 003E	 B0540001		xmem[i1] = i0			# LN: 43 | 
205   	 003F				cline_43_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
206   	 003F	 90750109		i0 = i7 - (0x109)			# LN: 44 | 
207   	 0040	 88140000		a0 = xmem[i0]			# LN: 44 | 
208   	 0041	 00004E80		a0 & a0			# LN: 44 | 
209   	 0042	 84480047		if (a != 0) jmp (else_0)			# LN: 44 | 
210   	 0043				cline_44_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
211   	 0043	 A0050000		i0 = (0) + (_string_const_0)			# LN: 46 | 
212   	 0044	 80880000		call (_printf)			# LN: 46 | 
213   	 0045				cline_46_0:			/* LN: 47 | CYCLE: 0 | RULES: () */ 
214   	 0045	 886AFFFF		halfword(a0) = (0xffff)			# LN: 47 | 
215   	 0046	 8008015A		jmp (__epilogue_270)			# LN: 47 | 
216   	 0047				cline_47_0:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
217   	 0047				endif_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
218   	 0047				else_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
219   	 0047	 90750109		i0 = i7 - (0x109)			# LN: 53 | 
220   	 0048	 B0140000		i0 = xmem[i0]			# LN: 53 | 
221   	 0049	 80880000		call (_cl_wavread_getnchannels)			# LN: 53 | 
222   	 004A	 9075010A		i0 = i7 - (0x10a)			# LN: 53 | 
223   	 004B	 98540000		xmem[i0] = a0h			# LN: 53 | 
224   	 004C				cline_53_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
225   	 004C	 90750109		i0 = i7 - (0x109)			# LN: 54 | 
226   	 004D	 B0140000		i0 = xmem[i0]			# LN: 54 | 
227   	 004E	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 54 | 
228   	 004F	 9075010B		i0 = i7 - (0x10b)			# LN: 54 | 
229   	 0050	 98540000		xmem[i0] = a0h			# LN: 54 | 
230   	 0051				cline_54_0:			/* LN: 55 | CYCLE: 0 | RULES: () */ 
231   	 0051	 90750109		i0 = i7 - (0x109)			# LN: 55 | 
232   	 0052	 B0140000		i0 = xmem[i0]			# LN: 55 | 
233   	 0053	 80880000		call (_cl_wavread_frame_rate)			# LN: 55 | 
234   	 0054	 9075010C		i0 = i7 - (0x10c)			# LN: 55 | 
235   	 0055	 98540000		xmem[i0] = a0h			# LN: 55 | 
236   	 0056				cline_55_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
237   	 0056	 90750109		i0 = i7 - (0x109)			# LN: 56 | 
238   	 0057	 B0140000		i0 = xmem[i0]			# LN: 56 | 
239   	 0058	 80880000		call (_cl_wavread_number_of_frames)			# LN: 56 | 
240   	 0059	 9075010D		i0 = i7 - (0x10d)			# LN: 56 | 
241   	 005A	 98540000		xmem[i0] = a0h			# LN: 56 | 
242   	 005B				cline_56_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
243   	 005B	 90750002		i0 = i7 - (0x2)			# LN: 61 | 
244   	 005C	 B0140000		i0 = xmem[i0]			# LN: 61 | 
245   	 005D	 9175020D		i1 = i7 - (525 - 0)			# LN: 61 | 
246   	 005E	 02087FFF		i0 += 1			# LN: 61 | 
247   	 005F	 B8140000		i4 = xmem[i0]			# LN: 61 | 
248   	 0060	 B1090030		i0 = i1			# LN: 61 | 
249   	 0061	 B8090031		i1 = i4			# LN: 61 | 
250   	 0062	 80880000		call (_strcpy)			# LN: 61 | 
251   	 0063				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
252   	 0063	 90750006		i0 = i7 - (0x6)			# LN: 62 | 
253   	 0064	 88140000		a0 = xmem[i0]			# LN: 62 | 
254   	 0065	 9075020E		i0 = i7 - (0x20e)			# LN: 62 | 
255   	 0066	 98540000		xmem[i0] = a0h			# LN: 62 | 
256   	 0067				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
257   	 0067	 9075020D		i0 = i7 - (525 - 0)			# LN: 63 | 
258   	 0068	 9175010B		i1 = i7 - (0x10b)			# LN: 63 | 
259   	 0069	 88140001		a0 = xmem[i1]			# LN: 63 | 
260   	 006A	 9175020E		i1 = i7 - (0x20e)			# LN: 63 | 
261   	 006B	 89140001		a1 = xmem[i1]			# LN: 63 | 
262   	 006C	 9175010C		i1 = i7 - (0x10c)			# LN: 63 | 
263   	 006D	 8C140001		b0 = xmem[i1]			# LN: 63 | 
264   	 006E	 80880000		call (_cl_wavwrite_open)			# LN: 63 | 
265   	 006F	 98090030		AnyReg(i0, a0h)			# LN: 63 | 
266   	 0070	 9175020F		i1 = i7 - (0x20f)			# LN: 63 | 
267   	 0071	 B0540001		xmem[i1] = i0			# LN: 63 | 
268   	 0072				cline_63_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
269   	 0072	 9075020F		i0 = i7 - (0x20f)			# LN: 64 | 
270   	 0073	 88140000		a0 = xmem[i0]			# LN: 64 | 
271   	 0074	 00004E80		a0 & a0			# LN: 64 | 
272   	 0075	 8448007A		if (a != 0) jmp (else_1)			# LN: 64 | 
273   	 0076				cline_64_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
274   	 0076	 A0050000		i0 = (0) + (_string_const_1)			# LN: 66 | 
275   	 0077	 80880000		call (_printf)			# LN: 66 | 
276   	 0078				cline_66_0:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
277   	 0078	 886AFFFF		halfword(a0) = (0xffff)			# LN: 67 | 
278   	 0079	 8008015A		jmp (__epilogue_270)			# LN: 67 | 
279   	 007A				cline_67_0:			/* LN: 70 | CYCLE: 0 | RULES: () */ 
280   	 007A				endif_1:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
281   	 007A				else_1:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
282   	 007A	 90750003		i0 = i7 - (0x3)			# LN: 70 | 
283   	 007B	 88140000		a0 = xmem[i0]			# LN: 70 | 
284   	 007C	 90750004		i0 = i7 - (0x4)			# LN: 70 | 
285   	 007D	 89140000		a1 = xmem[i0]			# LN: 70 | 
286   	 007E	 90750005		i0 = i7 - (0x5)			# LN: 70 | 
287   	 007F	 8C140000		b0 = xmem[i0]			# LN: 70 | 
288   	 0080	 80880000		call (_initialize)			# LN: 70 | 
289   	 0081				cline_70_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
290   	 0081	 90750210		i0 = i7 - (0x210)			# LN: 80 | 
291   	 0082	 00004DC0		a0 = 0			# LN: 80 | 
292   	 0083	 98540000		xmem[i0] = a0h			# LN: 80 | 
293   	 0084				for_2:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
294   	 0084	 9075010D		i0 = i7 - (0x10d)			# LN: 80 | 
295   	 0085	 88140000		a0 = xmem[i0]			# LN: 80 | 
296   	 0086	 894A0010		uhalfword(a1) = (0x10)			# LN: 80 | 
297   	 0087	 80880000		call (__div)			# LN: 80 | 
298   	 0088	 90750210		i0 = i7 - (0x210)			# LN: 80 | 
299   	 0089	 89140000		a1 = xmem[i0]			# LN: 80 | 
300   	 008A	 00004F01		a1 - a0			# LN: 80 | 
301   	 008B	 84C80152		if (a >= 0) jmp (for_end_2)			# LN: 80 | 
302   	 008C				cline_80_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
303   	 008C	 90750211		i0 = i7 - (0x211)			# LN: 82 | 
304   	 008D	 00004DC0		a0 = 0			# LN: 82 | 
305   	 008E	 98540000		xmem[i0] = a0h			# LN: 82 | 
306   	 008F	 810000B7		do (0x10), label_end_94			# LN: 82 | 
307   	 0090				cline_82_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
308   	 0090				label_begin_94:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
309   	 0090	 90750212		i0 = i7 - (0x212)			# LN: 84 | 
310   	 0091	 00004DC0		a0 = 0			# LN: 84 | 
311   	 0092	 98540000		xmem[i0] = a0h			# LN: 84 | 
312   	 0093				for_4:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
313   	 0093	 90750212		i0 = i7 - (0x212)			# LN: 84 | 
314   	 0094	 88140000		a0 = xmem[i0]			# LN: 84 | 
315   	 0095	 9075010A		i0 = i7 - (0x10a)			# LN: 84 | 
316   	 0096	 89140000		a1 = xmem[i0]			# LN: 84 | 
317   	 0097	 00004F08		a0 - a1			# LN: 84 | 
318   	 0098	 84C800B2		if (a >= 0) jmp (for_end_4)			# LN: 84 | 
319   	 0099				cline_84_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
320   	 0099	 90750109		i0 = i7 - (0x109)			# LN: 86 | 
321   	 009A	 B0140000		i0 = xmem[i0]			# LN: 86 | 
322   	 009B	 80880000		call (_cl_wavread_recvsample)			# LN: 86 | 
323   	 009C	 90750213		i0 = i7 - (0x213)			# LN: 86 | 
324   	 009D	 98540000		xmem[i0] = a0h			# LN: 86 | 
325   	 009E				cline_86_0:			/* LN: 87 | CYCLE: 0 | RULES: () */ 
326   	 009E	 90750212		i0 = i7 - (0x212)			# LN: 87 | 
327   	 009F	 88140000		a0 = xmem[i0]			# LN: 87 | 
328   	 00A0	 00004EC0		a0 = a0 << 4			# LN: 87 | 
329   	 00A1	 48707FFF		i0 = a0			# LN: 87 | 
330   	 00A2	 91750211		i1 = i7 - (0x211)			# LN: 87 | 
331   	 00A3	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 87 | 
332   	 00A4	 88140001		a0 = xmem[i1]			# LN: 87 | 
333   	 00A5	 09707FFF		a1 = i0			# LN: 87 | 
334   	 00A6	 00004480		a0 = a1 + a0			# LN: 87 | 
335   	 00A7	 98090030		AnyReg(i0, a0h)			# LN: 87 | 
336   	 00A8	 91750213		i1 = i7 - (0x213)			# LN: 87 | 
337   	 00A9	 88140001		a0 = xmem[i1]			# LN: 87 | 
338   	 00AA	 98D40000		ymem[i0] = a0h			# LN: 87 | 
339   	 00AB				cline_87_0:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
340   	 00AB				init_latch_label_2:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
341   	 00AB	 90750212		i0 = i7 - (0x212)			# LN: 84 | 
342   	 00AC	 88140000		a0 = xmem[i0]			# LN: 84 | 
343   	 00AD	 894A0001		uhalfword(a1) = (0x1)			# LN: 84 | 
344   	 00AE	 00004408		a0 = a0 + a1			# LN: 84 | 
345   	 00AF	 90750212		i0 = i7 - (0x212)			# LN: 84 | 
346   	 00B0	 98540000		xmem[i0] = a0h			# LN: 84 | 
347   	 00B1	 80080093		jmp (for_4)			# LN: 84 | 
348   	 00B2				cline_84_1:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
349   	 00B2				init_latch_label_3:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
350   	 00B2				for_end_4:			/* LN: 84 | CYCLE: 0 | RULES: () */ 
351   	 00B2	 90750211		i0 = i7 - (0x211)			# LN: 82 | 
352   	 00B3	 88140000		a0 = xmem[i0]			# LN: 82 | 
353   	 00B4	 894A0001		uhalfword(a1) = (0x1)			# LN: 82 | 
354   	 00B5	 00004408		a0 = a0 + a1			# LN: 82 | 
355   	 00B6	 90750211		i0 = i7 - (0x211)			# LN: 82 | 
356   	 00B7				label_end_94:			# LN: 82 | CYCLE: 5 | RULES: ()
357   	 00B7	 98540000		xmem[i0] = a0h			# LN: 82 | 
358   	 00B8				cline_82_1:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
359   	 00B8				for_end_3:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
360   	 00B8	 A0050000		i0 = (0) + (_sampleBuffer)			# LN: 92 | 
361   	 00B9	 A1050000		i1 = (0) + (_sampleBuffer)			# LN: 92 | 
362   	 00BA	 80880000		call (_gainProcessing)			# LN: 92 | 
363   	 00BB				cline_92_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
364   	 00BB	 90750211		i0 = i7 - (0x211)			# LN: 94 | 
365   	 00BC	 00004DC0		a0 = 0			# LN: 94 | 
366   	 00BD	 98540000		xmem[i0] = a0h			# LN: 94 | 
367   	 00BE	 8100014A		do (0x10), label_end_95			# LN: 94 | 
368   	 00BF				cline_94_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
369   	 00BF				label_begin_95:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
370   	 00BF	 90750212		i0 = i7 - (0x212)			# LN: 96 | 
371   	 00C0	 00004DC0		a0 = 0			# LN: 96 | 
372   	 00C1	 98540000		xmem[i0] = a0h			# LN: 96 | 
373   	 00C2				for_6:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
374   	 00C2	 90750212		i0 = i7 - (0x212)			# LN: 96 | 
375   	 00C3	 88140000		a0 = xmem[i0]			# LN: 96 | 
376   	 00C4	 9075020E		i0 = i7 - (0x20e)			# LN: 96 | 
377   	 00C5	 89140000		a1 = xmem[i0]			# LN: 96 | 
378   	 00C6	 00004F08		a0 - a1			# LN: 96 | 
379   	 00C7	 84C80145		if (a >= 0) jmp (for_end_6)			# LN: 96 | 
380   	 00C8				cline_96_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
381   	 00C8	 90750214		i0 = i7 - (0x214)			# LN: 98 | 
382   	 00C9	 00004DC0		a0 = 0			# LN: 98 | 
383   	 00CA	 98540000		xmem[i0] = a0h			# LN: 98 | 
384   	 00CB				cline_98_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
385   	 00CB				switch_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
386   	 00CB	 90750005		i0 = i7 - (0x5)			# LN: 99 | 
387   	 00CC	 88140000		a0 = xmem[i0]			# LN: 99 | 
388   	 00CD	 00004E80		a0 & a0			# LN: 99 | 
389   	 00CE	 840800DA		if (a == 0) jmp (case_0)			# LN: 99 | 
390   	 00CF	 90750005		i0 = i7 - (0x5)			# LN: 99 | 
391   	 00D0	 88140000		a0 = xmem[i0]			# LN: 99 | 
392   	 00D1	 894A0001		uhalfword(a1) = (0x1)			# LN: 99 | 
393   	 00D2	 00004F08		a0 - a1			# LN: 99 | 
394   	 00D3	 840800EC		if (a == 0) jmp (case_1)			# LN: 99 | 
395   	 00D4	 90750005		i0 = i7 - (0x5)			# LN: 99 | 
396   	 00D5	 88140000		a0 = xmem[i0]			# LN: 99 | 
397   	 00D6	 894A0002		uhalfword(a1) = (0x2)			# LN: 99 | 
398   	 00D7	 00004F08		a0 - a1			# LN: 99 | 
399   	 00D8	 840800FE		if (a == 0) jmp (case_2)			# LN: 99 | 
400   	 00D9	 8008012B		jmp (default_0)			# LN: 99 | 
401   	 00DA				cline_99_0:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
402   	 00DA				case_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
403   	 00DA	 90750212		i0 = i7 - (0x212)			# LN: 102 | 
404   	 00DB	 88140000		a0 = xmem[i0]			# LN: 102 | 
405   	 00DC	 00004E80		a0 & a0			# LN: 102 | 
406   	 00DD	 844800E2		if (a != 0) jmp (else_2)			# LN: 102 | 
407   	 00DE	 90750214		i0 = i7 - (0x214)			# LN: 102 | 
408   	 00DF	 00004DC0		a0 = 0			# LN: 102 | 
409   	 00E0	 98540000		xmem[i0] = a0h			# LN: 102 | 
410   	 00E1	 800800E2		jmp (endif_2)			# LN: 102 | 
411   	 00E2				cline_102_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
412   	 00E2				endif_2:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
413   	 00E2				else_2:			/* LN: 102 | CYCLE: 0 | RULES: () */ 
414   	 00E2	 90750212		i0 = i7 - (0x212)			# LN: 103 | 
415   	 00E3	 88140000		a0 = xmem[i0]			# LN: 103 | 
416   	 00E4	 894A0001		uhalfword(a1) = (0x1)			# LN: 103 | 
417   	 00E5	 00004F08		a0 - a1			# LN: 103 | 
418   	 00E6	 844800EB		if (a != 0) jmp (else_3)			# LN: 103 | 
419   	 00E7	 90750214		i0 = i7 - (0x214)			# LN: 103 | 
420   	 00E8	 884A0001		uhalfword(a0) = (0x1)			# LN: 103 | 
421   	 00E9	 98540000		xmem[i0] = a0h			# LN: 103 | 
422   	 00EA	 800800EB		jmp (endif_3)			# LN: 103 | 
423   	 00EB				cline_103_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
424   	 00EB				endif_3:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
425   	 00EB				else_3:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
426   	 00EB	 8008012C		jmp (switch_end_0)			# LN: 104 | 
427   	 00EC				cline_104_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
428   	 00EC				case_1:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
429   	 00EC	 90750212		i0 = i7 - (0x212)			# LN: 106 | 
430   	 00ED	 88140000		a0 = xmem[i0]			# LN: 106 | 
431   	 00EE	 00004E80		a0 & a0			# LN: 106 | 
432   	 00EF	 844800F4		if (a != 0) jmp (else_4)			# LN: 106 | 
433   	 00F0	 90750214		i0 = i7 - (0x214)			# LN: 106 | 
434   	 00F1	 884A0003		uhalfword(a0) = (0x3)			# LN: 106 | 
435   	 00F2	 98540000		xmem[i0] = a0h			# LN: 106 | 
436   	 00F3	 800800F4		jmp (endif_4)			# LN: 106 | 
437   	 00F4				cline_106_0:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
438   	 00F4				endif_4:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
439   	 00F4				else_4:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
440   	 00F4	 90750212		i0 = i7 - (0x212)			# LN: 107 | 
441   	 00F5	 88140000		a0 = xmem[i0]			# LN: 107 | 
442   	 00F6	 894A0001		uhalfword(a1) = (0x1)			# LN: 107 | 
443   	 00F7	 00004F08		a0 - a1			# LN: 107 | 
444   	 00F8	 844800FD		if (a != 0) jmp (else_5)			# LN: 107 | 
445   	 00F9	 90750214		i0 = i7 - (0x214)			# LN: 107 | 
446   	 00FA	 884A0004		uhalfword(a0) = (0x4)			# LN: 107 | 
447   	 00FB	 98540000		xmem[i0] = a0h			# LN: 107 | 
448   	 00FC	 800800FD		jmp (endif_5)			# LN: 107 | 
449   	 00FD				cline_107_0:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
450   	 00FD				endif_5:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
451   	 00FD				else_5:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
452   	 00FD	 8008012C		jmp (switch_end_0)			# LN: 108 | 
453   	 00FE				cline_108_0:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
454   	 00FE				case_2:			/* LN: 109 | CYCLE: 0 | RULES: () */ 
455   	 00FE	 90750212		i0 = i7 - (0x212)			# LN: 110 | 
456   	 00FF	 88140000		a0 = xmem[i0]			# LN: 110 | 
457   	 0100	 00004E80		a0 & a0			# LN: 110 | 
458   	 0101	 84480106		if (a != 0) jmp (else_6)			# LN: 110 | 
459   	 0102	 90750214		i0 = i7 - (0x214)			# LN: 110 | 
460   	 0103	 00004DC0		a0 = 0			# LN: 110 | 
461   	 0104	 98540000		xmem[i0] = a0h			# LN: 110 | 
462   	 0105	 80080106		jmp (endif_6)			# LN: 110 | 
463   	 0106				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
464   	 0106				endif_6:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
465   	 0106				else_6:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
466   	 0106	 90750212		i0 = i7 - (0x212)			# LN: 111 | 
467   	 0107	 88140000		a0 = xmem[i0]			# LN: 111 | 
468   	 0108	 894A0001		uhalfword(a1) = (0x1)			# LN: 111 | 
469   	 0109	 00004F08		a0 - a1			# LN: 111 | 
470   	 010A	 8448010F		if (a != 0) jmp (else_7)			# LN: 111 | 
471   	 010B	 90750214		i0 = i7 - (0x214)			# LN: 111 | 
472   	 010C	 884A0001		uhalfword(a0) = (0x1)			# LN: 111 | 
473   	 010D	 98540000		xmem[i0] = a0h			# LN: 111 | 
474   	 010E	 8008010F		jmp (endif_7)			# LN: 111 | 
475   	 010F				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
476   	 010F				endif_7:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
477   	 010F				else_7:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
478   	 010F	 90750212		i0 = i7 - (0x212)			# LN: 112 | 
479   	 0110	 88140000		a0 = xmem[i0]			# LN: 112 | 
480   	 0111	 894A0002		uhalfword(a1) = (0x2)			# LN: 112 | 
481   	 0112	 00004F08		a0 - a1			# LN: 112 | 
482   	 0113	 84480118		if (a != 0) jmp (else_8)			# LN: 112 | 
483   	 0114	 90750214		i0 = i7 - (0x214)			# LN: 112 | 
484   	 0115	 884A0002		uhalfword(a0) = (0x2)			# LN: 112 | 
485   	 0116	 98540000		xmem[i0] = a0h			# LN: 112 | 
486   	 0117	 80080118		jmp (endif_8)			# LN: 112 | 
487   	 0118				cline_112_0:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
488   	 0118				endif_8:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
489   	 0118				else_8:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
490   	 0118	 90750212		i0 = i7 - (0x212)			# LN: 113 | 
491   	 0119	 88140000		a0 = xmem[i0]			# LN: 113 | 
492   	 011A	 894A0003		uhalfword(a1) = (0x3)			# LN: 113 | 
493   	 011B	 00004F08		a0 - a1			# LN: 113 | 
494   	 011C	 84480121		if (a != 0) jmp (else_9)			# LN: 113 | 
495   	 011D	 90750214		i0 = i7 - (0x214)			# LN: 113 | 
496   	 011E	 884A0003		uhalfword(a0) = (0x3)			# LN: 113 | 
497   	 011F	 98540000		xmem[i0] = a0h			# LN: 113 | 
498   	 0120	 80080121		jmp (endif_9)			# LN: 113 | 
499   	 0121				cline_113_0:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
500   	 0121				endif_9:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
501   	 0121				else_9:			/* LN: 113 | CYCLE: 0 | RULES: () */ 
502   	 0121	 90750212		i0 = i7 - (0x212)			# LN: 114 | 
503   	 0122	 88140000		a0 = xmem[i0]			# LN: 114 | 
504   	 0123	 894A0004		uhalfword(a1) = (0x4)			# LN: 114 | 
505   	 0124	 00004F08		a0 - a1			# LN: 114 | 
506   	 0125	 8448012A		if (a != 0) jmp (else_10)			# LN: 114 | 
507   	 0126	 90750214		i0 = i7 - (0x214)			# LN: 114 | 
508   	 0127	 884A0004		uhalfword(a0) = (0x4)			# LN: 114 | 
509   	 0128	 98540000		xmem[i0] = a0h			# LN: 114 | 
510   	 0129	 8008012A		jmp (endif_10)			# LN: 114 | 
511   	 012A				cline_114_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
512   	 012A				endif_10:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
513   	 012A				else_10:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
514   	 012A	 8008012B		jmp (_9A5760)			# LN: 115 | 
515   	 012B				cline_99_1:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
516   	 012B				_9A5760:			/* LN: 97 | CYCLE: 0 | RULES: () */ 
517   	 012B				default_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
518   	 012B	 8008012C		jmp (switch_end_0)			# LN: 116 | 
519   	 012C				cline_116_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
520   	 012C				switch_end_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
521   	 012C	 90750214		i0 = i7 - (0x214)			# LN: 118 | 
522   	 012D	 88140000		a0 = xmem[i0]			# LN: 118 | 
523   	 012E	 00004EC0		a0 = a0 << 4			# LN: 118 | 
524   	 012F	 48707FFF		i0 = a0			# LN: 118 | 
525   	 0130	 91750211		i1 = i7 - (0x211)			# LN: 118 | 
526   	 0131	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 118 | 
527   	 0132	 88140001		a0 = xmem[i1]			# LN: 118 | 
528   	 0133	 09707FFF		a1 = i0			# LN: 118 | 
529   	 0134	 00004480		a0 = a1 + a0			# LN: 118 | 
530   	 0135	 98090030		AnyReg(i0, a0h)			# LN: 118 | 
531   	 0136	 91750213		i1 = i7 - (0x213)			# LN: 118 | 
532   	 0137	 88940000		a0 = ymem[i0]			# LN: 118 | 
533   	 0138	 98540001		xmem[i1] = a0h			# LN: 118 | 
534   	 0139				cline_118_0:			/* LN: 119 | CYCLE: 0 | RULES: () */ 
535   	 0139	 9075020F		i0 = i7 - (0x20f)			# LN: 119 | 
536   	 013A	 91750213		i1 = i7 - (0x213)			# LN: 119 | 
537   	 013B	 88140001		a0 = xmem[i1]			# LN: 119 | 
538   	 013C	 B0140000		i0 = xmem[i0]			# LN: 119 | 
539   	 013D	 80880000		call (_cl_wavwrite_sendsample)			# LN: 119 | 
540   	 013E				cline_119_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
541   	 013E				init_latch_label_4:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
542   	 013E	 90750212		i0 = i7 - (0x212)			# LN: 96 | 
543   	 013F	 88140000		a0 = xmem[i0]			# LN: 96 | 
544   	 0140	 894A0001		uhalfword(a1) = (0x1)			# LN: 96 | 
545   	 0141	 00004408		a0 = a0 + a1			# LN: 96 | 
546   	 0142	 90750212		i0 = i7 - (0x212)			# LN: 96 | 
547   	 0143	 98540000		xmem[i0] = a0h			# LN: 96 | 
548   	 0144	 800800C2		jmp (for_6)			# LN: 96 | 
549   	 0145				cline_96_1:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
550   	 0145				init_latch_label_5:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
551   	 0145				for_end_6:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
552   	 0145	 90750211		i0 = i7 - (0x211)			# LN: 94 | 
553   	 0146	 88140000		a0 = xmem[i0]			# LN: 94 | 
554   	 0147	 894A0001		uhalfword(a1) = (0x1)			# LN: 94 | 
555   	 0148	 00004408		a0 = a0 + a1			# LN: 94 | 
556   	 0149	 90750211		i0 = i7 - (0x211)			# LN: 94 | 
557   	 014A				label_end_95:			# LN: 94 | CYCLE: 5 | RULES: ()
558   	 014A	 98540000		xmem[i0] = a0h			# LN: 94 | 
559   	 014B				cline_94_1:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
560   	 014B				init_latch_label_6:			/* LN: 122 | CYCLE: 0 | RULES: () */ 
561   	 014B				for_end_5:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
562   	 014B	 90750210		i0 = i7 - (0x210)			# LN: 80 | 
563   	 014C	 88140000		a0 = xmem[i0]			# LN: 80 | 
564   	 014D	 894A0001		uhalfword(a1) = (0x1)			# LN: 80 | 
565   	 014E	 00004408		a0 = a0 + a1			# LN: 80 | 
566   	 014F	 90750210		i0 = i7 - (0x210)			# LN: 80 | 
567   	 0150	 98540000		xmem[i0] = a0h			# LN: 80 | 
568   	 0151	 80080084		jmp (for_2)			# LN: 80 | 
569   	 0152				cline_80_1:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
570   	 0152				for_end_2:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
571   	 0152	 90750109		i0 = i7 - (0x109)			# LN: 127 | 
572   	 0153	 B0140000		i0 = xmem[i0]			# LN: 127 | 
573   	 0154	 80880000		call (_cl_wavread_close)			# LN: 127 | 
574   	 0155				cline_127_0:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
575   	 0155	 9075020F		i0 = i7 - (0x20f)			# LN: 128 | 
576   	 0156	 B0140000		i0 = xmem[i0]			# LN: 128 | 
577   	 0157	 80880000		call (_cl_wavwrite_close)			# LN: 128 | 
578   	 0158				cline_128_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
579   	 0158	 00004DC0		a0 = 0			# LN: 131 | 
580   	 0159	 8008015A		jmp (__epilogue_270)			# LN: 131 | 
581   	 015A				cline_131_0:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
582   	 015A				__epilogue_270:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
583   	 015A	 97750214		i7 = i7 - (0x214)			# LN: 132 | 
584   	 015B	 02177FFF		i7 -= 1			# LN: 132 | 
585   	 015C	 81880000		ret			# LN: 132 | 
586   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_9A5760                                                                         			         Relocatable         main_GEN_0007:012BH
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_270                                                                  			         Relocatable         main_GEN_0007:015AH
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0000:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0001:0000H
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_gainProcessing                                                                 					 External   
_initialize                                                                     					 External   
_main                                                                           			  Public Relocatable       main_GEN_0007:0000H
_printf                                                                         					 External   
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0002:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0003:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0004:0000H
_tremoloL                                                                       			  Public Relocatable       main_GEN_0005:0000H
_tremoloR                                                                       			  Public Relocatable       main_GEN_0006:0000H
case_0                                                                          			         Relocatable         main_GEN_0007:00DAH
case_1                                                                          			         Relocatable         main_GEN_0007:00ECH
case_2                                                                          			         Relocatable         main_GEN_0007:00FEH
cline_102_0                                                                     			  Unused Relocatable        main_GEN_0007:00E2H
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0007:00EBH
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0007:00ECH
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0007:00F4H
cline_107_0                                                                     			  Unused Relocatable        main_GEN_0007:00FDH
cline_108_0                                                                     			  Unused Relocatable        main_GEN_0007:00FEH
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0007:0106H
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0007:010FH
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0007:0118H
cline_113_0                                                                     			  Unused Relocatable        main_GEN_0007:0121H
cline_114_0                                                                     			  Unused Relocatable        main_GEN_0007:012AH
cline_116_0                                                                     			  Unused Relocatable        main_GEN_0007:012CH
cline_118_0                                                                     			  Unused Relocatable        main_GEN_0007:0139H
cline_119_0                                                                     			  Unused Relocatable        main_GEN_0007:013EH
cline_11_0                                                                      			  Unused Relocatable        main_GEN_0007:0007H
cline_127_0                                                                     			  Unused Relocatable        main_GEN_0007:0155H
cline_128_0                                                                     			  Unused Relocatable        main_GEN_0007:0158H
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0007:015AH
cline_30_0                                                                      			  Unused Relocatable        main_GEN_0007:000AH
cline_31_0                                                                      			  Unused Relocatable        main_GEN_0007:000DH
cline_32_0                                                                      			  Unused Relocatable        main_GEN_0007:0010H
cline_33_0                                                                      			  Unused Relocatable        main_GEN_0007:0013H
cline_36_0                                                                      			  Unused Relocatable        main_GEN_0007:0017H
cline_36_1                                                                      			  Unused Relocatable        main_GEN_0007:0033H
cline_37_0                                                                      			  Unused Relocatable        main_GEN_0007:001BH
cline_37_1                                                                      			  Unused Relocatable        main_GEN_0007:002DH
cline_38_0                                                                      			  Unused Relocatable        main_GEN_0007:0027H
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0007:003AH
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0007:003FH
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0007:0043H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0007:0045H
cline_47_0                                                                      			  Unused Relocatable        main_GEN_0007:0047H
cline_53_0                                                                      			  Unused Relocatable        main_GEN_0007:004CH
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0007:0051H
cline_55_0                                                                      			  Unused Relocatable        main_GEN_0007:0056H
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0007:005BH
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0007:0063H
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0007:0067H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0007:0072H
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0007:0076H
cline_66_0                                                                      			  Unused Relocatable        main_GEN_0007:0078H
cline_67_0                                                                      			  Unused Relocatable        main_GEN_0007:007AH
cline_70_0                                                                      			  Unused Relocatable        main_GEN_0007:0081H
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0007:008CH
cline_80_1                                                                      			  Unused Relocatable        main_GEN_0007:0152H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0007:0090H
cline_82_1                                                                      			  Unused Relocatable        main_GEN_0007:00B8H
cline_84_0                                                                      			  Unused Relocatable        main_GEN_0007:0099H
cline_84_1                                                                      			  Unused Relocatable        main_GEN_0007:00B2H
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0007:009EH
cline_87_0                                                                      			  Unused Relocatable        main_GEN_0007:00ABH
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0007:00BBH
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0007:00BFH
cline_94_1                                                                      			  Unused Relocatable        main_GEN_0007:014BH
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0007:00C8H
cline_96_1                                                                      			  Unused Relocatable        main_GEN_0007:0145H
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0007:00CBH
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0007:00DAH
cline_99_1                                                                      			  Unused Relocatable        main_GEN_0007:012BH
default_0                                                                       			         Relocatable         main_GEN_0007:012BH
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0007:0047H
else_1                                                                          			         Relocatable         main_GEN_0007:007AH
else_10                                                                         			         Relocatable         main_GEN_0007:012AH
else_2                                                                          			         Relocatable         main_GEN_0007:00E2H
else_3                                                                          			         Relocatable         main_GEN_0007:00EBH
else_4                                                                          			         Relocatable         main_GEN_0007:00F4H
else_5                                                                          			         Relocatable         main_GEN_0007:00FDH
else_6                                                                          			         Relocatable         main_GEN_0007:0106H
else_7                                                                          			         Relocatable         main_GEN_0007:010FH
else_8                                                                          			         Relocatable         main_GEN_0007:0118H
else_9                                                                          			         Relocatable         main_GEN_0007:0121H
endif_0                                                                         			  Unused Relocatable        main_GEN_0007:0047H
endif_1                                                                         			  Unused Relocatable        main_GEN_0007:007AH
endif_10                                                                        			         Relocatable         main_GEN_0007:012AH
endif_2                                                                         			         Relocatable         main_GEN_0007:00E2H
endif_3                                                                         			         Relocatable         main_GEN_0007:00EBH
endif_4                                                                         			         Relocatable         main_GEN_0007:00F4H
endif_5                                                                         			         Relocatable         main_GEN_0007:00FDH
endif_6                                                                         			         Relocatable         main_GEN_0007:0106H
endif_7                                                                         			         Relocatable         main_GEN_0007:010FH
endif_8                                                                         			         Relocatable         main_GEN_0007:0118H
endif_9                                                                         			         Relocatable         main_GEN_0007:0121H
for_2                                                                           			         Relocatable         main_GEN_0007:0084H
for_4                                                                           			         Relocatable         main_GEN_0007:0093H
for_6                                                                           			         Relocatable         main_GEN_0007:00C2H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0007:0033H
for_end_1                                                                       			  Unused Relocatable        main_GEN_0007:002DH
for_end_2                                                                       			         Relocatable         main_GEN_0007:0152H
for_end_3                                                                       			  Unused Relocatable        main_GEN_0007:00B8H
for_end_4                                                                       			         Relocatable         main_GEN_0007:00B2H
for_end_5                                                                       			  Unused Relocatable        main_GEN_0007:014BH
for_end_6                                                                       			         Relocatable         main_GEN_0007:0145H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0007:0027H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0007:002DH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0007:00ABH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0007:00B2H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0007:013EH
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0007:0145H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0007:014BH
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0007:001BH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0007:0017H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0007:0090H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0007:00BFH
label_end_92                                                                    			         Relocatable         main_GEN_0007:002CH
label_end_93                                                                    			         Relocatable         main_GEN_0007:0032H
label_end_94                                                                    			         Relocatable         main_GEN_0007:00B7H
label_end_95                                                                    			         Relocatable         main_GEN_0007:014AH
switch_0                                                                        			  Unused Relocatable        main_GEN_0007:00CBH
switch_end_0                                                                    			         Relocatable         main_GEN_0007:012CH

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0080H	 main_GEN_0002                           			 Y_OVLY                                  
0021H	 main_GEN_0003                           			 X_OVLY                                  
0021H	 main_GEN_0004                           			 X_OVLY                                  
0006H	 main_GEN_0005                           			 Y_OVLY                                  
0006H	 main_GEN_0006                           			 Y_OVLY                                  
015DH	 main_GEN_0007                           			 CODE_OVLY                               
